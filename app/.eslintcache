[{"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/apollo.ts":"1","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/MakerverseProvider.tsx":"2","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/analytics.ts":"3","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/store/redux.ts":"4","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortProvider.tsx":"5","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/ProtectedApp.tsx":"6","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/index.ts":"7","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/reducers.ts":"8","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/Workspaces.ts":"9","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/index.ts":"10","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/types.ts":"11","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/index.ts":"12","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/workspace.ts":"13","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/semvers.ts":"14","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/active-state.ts":"15","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/workspace-axis.ts":"16","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/CallbackPage.tsx":"17","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/LoginPage.tsx":"18","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/MakerverseContext.ts":"19","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/Styles.ts":"20","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ReconnectRedirect.tsx":"21","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortContext.ts":"22","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/constants/docs.ts":"23","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/App.tsx":"24","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/index.ts":"25","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/index.ts":"26","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/MakerverseHooks.ts":"27","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/index.tsx":"28","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Docs/index.tsx":"29","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/index.tsx":"30","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/index.tsx":"31","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Settings/index.tsx":"32","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Home/index.tsx":"33","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/Styles.ts":"34","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/SideDrawer.tsx":"35","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/HeaderBar.tsx":"36","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ProtectedRoute.tsx":"37","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/NotFound.tsx":"38","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortHooks.ts":"39","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/Styles.ts":"40","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/CreateWorkspaceModal.tsx":"41","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/OpenMachinePort.tsx":"42","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ListMenu.tsx":"43","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/UserMenu.tsx":"44","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/Styles.ts":"45","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortStatus.tsx":"46","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortSelect.tsx":"47","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortConnectionSteps.tsx":"48","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ListMenuItem.tsx":"49","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Modals/BackendDiconnectedModal.tsx":"50","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/WorkspaceConnector.tsx":"51","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Workspaces/Styles.ts":"52","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/types.ts":"53","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Workspaces/WorkspaceStatus.tsx":"54","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/Styles.ts":"55","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/OpenWorkspaceButton.tsx":"56","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/ToolBar.tsx":"57","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/index.ts":"58","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/types.ts":"59","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Console/index.tsx":"60","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Console/Console.tsx":"61","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/WorkspaceSettings/index.tsx":"62","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Plans/index.tsx":"63","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Machine/index.tsx":"64","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Controls/index.tsx":"65","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/WorkspaceSettings/WorkspaceSettings.tsx":"66","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Machine/Machine.tsx":"67","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Controls/Controls.tsx":"68","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Plans/Plans.tsx":"69"},{"size":2983,"mtime":1607541257410,"results":"70","hashOfConfig":"71"},{"size":5394,"mtime":1607542044126,"results":"72","hashOfConfig":"71"},{"size":2024,"mtime":1607540288450,"results":"73","hashOfConfig":"71"},{"size":1085,"mtime":1606319571150,"results":"74","hashOfConfig":"71"},{"size":2589,"mtime":1607542344397,"results":"75","hashOfConfig":"71"},{"size":1939,"mtime":1607541371677,"results":"76","hashOfConfig":"71"},{"size":91,"mtime":1606919306373,"results":"77","hashOfConfig":"71"},{"size":515,"mtime":1606319024700,"results":"78","hashOfConfig":"71"},{"size":2086,"mtime":1606919146763,"results":"79","hashOfConfig":"71"},{"size":52,"mtime":1605977443411,"results":"80","hashOfConfig":"71"},{"size":516,"mtime":1606319024702,"results":"81","hashOfConfig":"71"},{"size":110,"mtime":1605810123128,"results":"82","hashOfConfig":"71"},{"size":17886,"mtime":1607541264299,"results":"83","hashOfConfig":"71"},{"size":1031,"mtime":1605726040464,"results":"84","hashOfConfig":"71"},{"size":9880,"mtime":1606497234574,"results":"85","hashOfConfig":"71"},{"size":4959,"mtime":1606241698259,"results":"86","hashOfConfig":"71"},{"size":2606,"mtime":1607540855782,"results":"87","hashOfConfig":"71"},{"size":4116,"mtime":1607540918141,"results":"88","hashOfConfig":"71"},{"size":1120,"mtime":1607543348524,"results":"89","hashOfConfig":"71"},{"size":1160,"mtime":1606847416723,"results":"90","hashOfConfig":"71"},{"size":572,"mtime":1606327522536,"results":"91","hashOfConfig":"71"},{"size":422,"mtime":1606577054184,"results":"92","hashOfConfig":"71"},{"size":136,"mtime":1606848450002,"results":"93","hashOfConfig":"71"},{"size":2477,"mtime":1607373143039,"results":"94","hashOfConfig":"71"},{"size":252,"mtime":1605977384904,"results":"95","hashOfConfig":"71"},{"size":35,"mtime":1606568597072,"results":"96","hashOfConfig":"71"},{"size":3107,"mtime":1607549034220,"results":"97","hashOfConfig":"71"},{"size":1084,"mtime":1607376115820,"results":"98","hashOfConfig":"71"},{"size":878,"mtime":1607541341087,"results":"99","hashOfConfig":"71"},{"size":1295,"mtime":1607522385350,"results":"100","hashOfConfig":"71"},{"size":2001,"mtime":1607376250482,"results":"101","hashOfConfig":"71"},{"size":170,"mtime":1605811767094,"results":"102","hashOfConfig":"71"},{"size":338,"mtime":1606245292423,"results":"103","hashOfConfig":"71"},{"size":2271,"mtime":1607376144857,"results":"104","hashOfConfig":"71"},{"size":1416,"mtime":1607378968835,"results":"105","hashOfConfig":"71"},{"size":1564,"mtime":1607376955626,"results":"106","hashOfConfig":"71"},{"size":944,"mtime":1605811448830,"results":"107","hashOfConfig":"71"},{"size":380,"mtime":1605811998908,"results":"108","hashOfConfig":"71"},{"size":200,"mtime":1606577019220,"results":"109","hashOfConfig":"71"},{"size":417,"mtime":1607376304343,"results":"110","hashOfConfig":"71"},{"size":8189,"mtime":1607541700637,"results":"111","hashOfConfig":"71"},{"size":6501,"mtime":1607541192295,"results":"112","hashOfConfig":"71"},{"size":3253,"mtime":1607541074312,"results":"113","hashOfConfig":"71"},{"size":3235,"mtime":1607541151347,"results":"114","hashOfConfig":"71"},{"size":620,"mtime":1607015116961,"results":"115","hashOfConfig":"71"},{"size":3220,"mtime":1607273542895,"results":"116","hashOfConfig":"71"},{"size":3049,"mtime":1607541227937,"results":"117","hashOfConfig":"71"},{"size":4602,"mtime":1607530812822,"results":"118","hashOfConfig":"71"},{"size":989,"mtime":1606501901763,"results":"119","hashOfConfig":"71"},{"size":1523,"mtime":1607540960543,"results":"120","hashOfConfig":"71"},{"size":1700,"mtime":1607377488715,"results":"121","hashOfConfig":"71"},{"size":160,"mtime":1607377414852,"results":"122","hashOfConfig":"123"},{"size":288,"mtime":1607357957889,"results":"124","hashOfConfig":"71"},{"size":2449,"mtime":1607520551744,"results":"125","hashOfConfig":"71"},{"size":1303,"mtime":1607549629074,"results":"126","hashOfConfig":"71"},{"size":2458,"mtime":1607545318562,"results":"127","hashOfConfig":"71"},{"size":4286,"mtime":1607551603757,"results":"128","hashOfConfig":"71"},{"size":283,"mtime":1607551242609,"results":"129","hashOfConfig":"71"},{"size":110,"mtime":1607550892924,"results":"130","hashOfConfig":"71"},{"size":48,"mtime":1607550882762,"results":"131","hashOfConfig":"71"},{"size":319,"mtime":1607551041105,"results":"132","hashOfConfig":"71"},{"size":58,"mtime":1607551208983,"results":"133","hashOfConfig":"71"},{"size":46,"mtime":1607551203482,"results":"134","hashOfConfig":"71"},{"size":48,"mtime":1607551194382,"results":"135","hashOfConfig":"71"},{"size":49,"mtime":1607551188414,"results":"136","hashOfConfig":"71"},{"size":339,"mtime":1607551174326,"results":"137","hashOfConfig":"71"},{"size":616,"mtime":1607551721161,"results":"138","hashOfConfig":"71"},{"size":321,"mtime":1607551245616,"results":"139","hashOfConfig":"71"},{"size":315,"mtime":1607551162657,"results":"140","hashOfConfig":"71"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},"laawzo",{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"143"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"143"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"143"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"143"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"143"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"143"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"143"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"143"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"143"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"143"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"143"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"143"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"143"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"143"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"143"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"143"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"143"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"143"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t5r4x4",{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"143"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/apollo.ts",[],[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/MakerverseProvider.tsx",["299"],"\nimport _ from 'lodash';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, { FunctionComponent } from 'react';\nimport {Redirect, Route, Switch, useLocation, Link } from 'react-router-dom';\nimport {OpenWorkShop} from '@openworkshop/lib';\nimport {\n  StartupFragment,\n  MakerverseEssentialSettingsFragment,\n  MakerverseSessionFragment,\n  useWorkspaceChangeSubscription,\n  WorkspaceFullFragment,\n  WorkspaceState,\n} from '../api/graphql';\nimport i18nConfig from '../config/i18n';\nimport analytics from '../lib/analytics';\nimport {IMakerverse, MakerverseContext} from '../lib/Makerverse';\nimport { LoginPage, CallbackPage } from 'components/Login';\nimport usePromise from 'react-promise-suspense';\nimport i18next, { StringMap } from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { Workspace } from 'lib/workspaces';\nimport {BackendConnection} from '../lib/Makerverse/apollo';\nimport {AppState} from '../store/redux';\nimport ProtectedApp from '../views/ProtectedApp';\nimport { useSelector } from 'react-redux';\nimport { User } from 'oidc-client';\nimport SystemPortProvider from './SystemPortProvider';\n\nconst workspaceObjects: { [key: string]: Workspace } = {};\n\ninterface IProps {\n  connection: BackendConnection;\n}\n\nconst MakerverseProvider: FunctionComponent<IProps> = (props) => {\n  const log = useLogger(MakerverseProvider);\n  const ows = React.useContext(OpenWorkShop);\n  const onWorkspaceChanged = useWorkspaceChangeSubscription();\n  const { connection } = props;\n  const location = useLocation();\n  const [workspaceFragments, setWorkspaceFragments] = React.useState<WorkspaceFullFragment[]>([]);\n  const [settings, setSettings] = React.useState<MakerverseEssentialSettingsFragment | undefined>(undefined);\n  const [session, setSession] = React.useState<MakerverseSessionFragment | undefined>(undefined);\n\n  const user = useSelector<AppState, User | undefined>((state) => state.oidc.user);\n\n  // Load/unload workspaces\n  const currentWorkspaceIds = workspaceFragments.map(ws => ws.id);\n  const previousWorkspaceIds = Object.keys(workspaceObjects);\n  const newWorkspaceIds = _.difference(currentWorkspaceIds, previousWorkspaceIds);\n  const removedWorkspaceIds = _.difference(previousWorkspaceIds, currentWorkspaceIds);\n\n  removedWorkspaceIds.forEach(id => {\n    log.debug('unload workspace', id);\n    delete workspaceObjects[id];\n  });\n\n  newWorkspaceIds.forEach(id => {\n    const frag = _.find(workspaceFragments, r => r.id === id);\n    if (frag) {\n      log.debug('load workspace', id);\n      workspaceObjects[id] = new Workspace(ows, frag);\n    } else {\n      log.error('missing workspace', id);\n    }\n  });\n\n  const workspaces = Object.values(workspaceObjects);\n  const wsPrefix = '/workspaces/';\n  const path = location.pathname;\n  const currentWorkspaceId = path.startsWith(wsPrefix) ? path.substring(wsPrefix.length) : undefined;\n\n  // Apply subscription mutations\n  React.useEffect(() => {\n    if (settings && onWorkspaceChanged.data && onWorkspaceChanged.data.workspace) {\n      const workspaceFragment: WorkspaceFullFragment = onWorkspaceChanged.data.workspace;\n\n      const changedWorkspaceId = workspaceFragment.id;\n      const newFragments = [...workspaceFragments];\n\n      if (workspaceFragment.state === WorkspaceState.Deleted) {\n        log.debug('[WORKSPACE]', 'delete', changedWorkspaceId, workspaceFragment);\n        const ei = _.findIndex(newFragments, ws => ws.id === changedWorkspaceId);\n        if (ei >= 0) {\n          newFragments.splice(ei, 1);\n        }\n      } else if (_.has(workspaceObjects, changedWorkspaceId)) {\n        log.debug('[WORKSPACE]', 'update', changedWorkspaceId, workspaceFragment);\n        workspaceObjects[changedWorkspaceId].updateRecord(workspaceFragment);\n      } else {\n        log.debug('[WORKSPACE]', 'add', changedWorkspaceId, workspaceFragment);\n        newFragments.push(workspaceFragment);\n        setWorkspaceFragments(newFragments);\n      }\n    }\n  }, [workspaceObjects, onWorkspaceChanged]);\n\n  function t(key: string, opts?: StringMap): string {\n    return ows.t(key, opts);\n  }\n\n  // Set up the IMakerverse interface for the .Provider...\n  const makerverse: IMakerverse = { ows, connection, session, workspaces, t };\n\n  usePromise(async () => {\n    log.debug('loading...', ows);\n    await i18next.use(XHR).use(LanguageDetector).init(i18nConfig);\n    analytics.initialize(ows);\n  }, []);\n\n  function onLoaded(session: MakerverseSessionFragment, startup: StartupFragment) {\n    log.debug('loaded', 'session', !!session, 'settings', !!startup);\n    setSession(session);\n    setSettings(startup.settings);\n    setWorkspaceFragments(startup.workspaces);\n  }\n\n  return (\n    <MakerverseContext.Provider value={makerverse} >\n      <SystemPortProvider >\n        <Switch>\n          <Route path='/login' component={LoginPage} />\n          <Route path='/callback' component={CallbackPage} />\n          {user && <Route path='/' >\n            <ProtectedApp\n              token={user.access_token}\n              onLoaded={onLoaded}\n              currentWorkspaceId={currentWorkspaceId}\n            />\n          </Route>}\n          {!user && <Route path='/'>\n            <Redirect to=\"/login\" />\n          </Route>}\n        </Switch>\n      </SystemPortProvider>\n    </MakerverseContext.Provider>\n  );\n};\n\nexport default MakerverseProvider;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/analytics.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/store/redux.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortProvider.tsx",["300"],"import useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport _ from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport {IPortCollection, SystemPortContext} from './SystemPortContext';\nimport {\n  PortStatusFragment,\n  useListPortsQuery,\n  usePortChangeSubscription\n} from '../api/graphql';\nimport {AlertDialog} from '@openworkshop/ui/components/Alerts';\nimport { useTranslation } from 'react-i18next';\nimport { useMakerverse } from 'providers';\n\ninterface OwnProps {\n  children: React.ReactNode;\n}\n\ntype Props = OwnProps;\n\nconst SystemPortProvider: FunctionComponent<Props> = (props) => {\n  const log = useLogger(SystemPortProvider);\n  const { t } = useTranslation();\n  const makerverse = useMakerverse();\n\n  // The initial state of all ports, a simple query.\n  const queryPorts = useListPortsQuery();\n\n  // For a given port: Connected/Disconnected, Activity state\n  const onPortStatusChange = usePortChangeSubscription();\n  const updatedPort = onPortStatusChange.data ? onPortStatusChange.data.port : undefined;\n\n  // const portList = query.data && data.ports ? data.ports : [];\n  const [portList, setPortList] = React.useState<PortStatusFragment[]>([]);\n  const portNames = portList.map(p => p.portName);\n  const sortedPortNames = portNames.sort();\n  const hasPorts = portNames.length > 0;\n\n  const errors = [queryPorts.error, onPortStatusChange.error];\n\n  log.verbose('query', queryPorts, 'status', onPortStatusChange);\n\n  // Load the initial queryPorts into the state.\n  React.useEffect(() => {\n    if (!hasPorts && queryPorts.data && queryPorts.data.ports) {\n      log.debug('[PORT LIST]', 'initial query', queryPorts.data.ports);\n      setPortList(queryPorts.data.ports);\n    }\n  }, [hasPorts, queryPorts]);\n\n  // Update the current state of a port\n  React.useEffect(() => {\n    if (updatedPort) {\n      log.debug('[PORT LIST]', 'updated port', updatedPort);\n      const idx = _.findIndex(portList, p => p.portName === updatedPort.portName);\n      const ports = [...portList];\n      if (idx === undefined || idx < 0) {\n        ports.push(updatedPort);\n      } else {\n        ports[idx] = updatedPort;\n      }\n      setPortList(ports);\n    }\n  }, [updatedPort]);\n\n  const portMap = _.keyBy(portList, p => p.portName);\n  const portCollection: IPortCollection = { errors, sortedPortNames, portMap };\n\n  return (\n    <SystemPortContext.Provider value={portCollection} >\n      <AlertDialog title={makerverse.ows.t('Port Connection Error')} errors={errors} />\n      {props.children}\n    </SystemPortContext.Provider>\n  );\n};\n\nexport default SystemPortProvider;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/ProtectedApp.tsx",["301"],"import { Typography } from '@material-ui/core';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport {Preloader} from '@openworkshop/ui/components';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {Link } from 'react-router-dom';\nimport {\n  StartupFragment,\n  MakerverseSessionFragment,\n  useStartupQuery,\n} from '../api/graphql';\nimport App from './App';\nimport {AlertDialog} from '@openworkshop/ui/components/Alerts';\nimport {useMakerverse} from '../providers';\n\ninterface IProps {\n  token: string;\n  currentWorkspaceId?: string;\n  onLoaded: (u: MakerverseSessionFragment, s: StartupFragment) => void;\n}\n\nconst ProtectedApp: React.FunctionComponent<IProps> = (props) => {\n  const log = useLogger(ProtectedApp);\n  const makerverse = useMakerverse();\n  const { onLoaded, currentWorkspaceId, token } = props;\n  const [ dataError, setDataError ] = React.useState<Error | undefined>(undefined);\n  const { loading, data, error } = useStartupQuery({ variables: { token: token ?? '' }});\n\n  React.useEffect(() => {\n    if (!loading && !error) {\n      if (!data) {\n        log.warn('no data in token response');\n        setDataError(new Error('No data in response.'));\n      } else {\n        log.debug('valid token response');\n        onLoaded(data.session, data);\n      }\n    }\n  }, [loading, data, error]);\n\n  if (loading) {\n    log.debug('[TOKEN]', 'validating', data, error);\n    return <Preloader />;\n  }\n\n  if (error || dataError) {\n    log.warn('failed to start', loading, error, data);\n    return (\n      <AlertDialog title={makerverse.t('Startup Error')} permanent={true} errors={[error, dataError]}>\n        <Typography variant=\"subtitle1\"><Link to=\"/login\">{makerverse.t('Return to Login')}</Link></Typography>\n      </AlertDialog>\n    );\n  }\n\n  log.verbose('[TOKEN]', 'validated', data);\n  return <App currentWorkspaceId={currentWorkspaceId} />;\n};\n\nexport default ProtectedApp;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/reducers.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/Workspaces.ts",["302"],"import Workspace from 'lib/workspaces/workspace';\n\n// export type WorkspaceMap = { [key: string]: Workspace };\n\nexport default class Workspaces {\n  // _makerverse: IMakerverse;\n\n  // _currentWorkspace?: Workspace = undefined;\n  //\n  // _all: WorkspaceMap = {};\n  //\n  // _log?: Logger = undefined;\n  //\n  // constructor(makerverse: IMakerverse) {\n  //   this._makerverse = makerverse;\n  // }\n  //\n  // get all(): WorkspaceMap {\n  //   return this._all;\n  // }\n  //\n  // get current(): Workspace | undefined {\n  //   return this._currentWorkspace;\n  // }\n  //\n  // set current(ws: Workspace | undefined) {\n  //   this.log.debug('setting workspace to', ws?.id);\n  //   if (this.current) {\n  //     if (ws && ws.id === this.current.id) {\n  //       return;\n  //     }\n  //     this.current.isActive = false;\n  //   }\n  //   this._currentWorkspace = ws;\n  //   if (this.current) {\n  //     this.current.isActive = true;\n  //   }\n  // }\n  //\n  // findByPath(path: string): Workspace | undefined {\n  //   if (path.startsWith('/workspaces')) {\n  //     path = path.substring('/workspaces'.length);\n  //   }\n  //   return _.find(this.all, (w) => {\n  //     return w.path === path;\n  //   });\n  // }\n  // //\n  // // load(mv: IMakerverse, record: WorkspaceRecord): Workspace | undefined {\n  // //   const id: string = record.id;\n  // //   if (_.has(this.all, id)) {\n  // //     this.all[id]._record = {\n  // //       ...this.all[id]._record,\n  // //       ...record,\n  // //     };\n  // //   } else {\n  // //     this.all[id] = new Workspace(mv, record);\n  // //   }\n  // //   return this.all[id];\n  // // }\n  //\n  // async unload(id: string): Promise<void> {\n  //   if (!_.has(this.all, id)) {\n  //     return;\n  //   }\n  //   const workspace = this.all[id];\n  //   workspace.removeControllerEvents(workspace._controllerEvents);\n  //   await workspace.closePort();\n  //   delete this.all[id];\n  // }\n  //\n  // disconnect(): void {\n  //   Object.keys(this.all).map((id) => {\n  //     const workspace: Workspace = this.all[id];\n  //     void workspace.controller.disconnect();\n  //   });\n  // }\n}\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/types.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/workspace.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/semvers.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/active-state.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/workspace-axis.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/CallbackPage.tsx",["303","304"],"import {Typography } from '@material-ui/core';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport {AlertList} from '@openworkshop/ui/components/Alerts';\nimport ToolbarCard from '@openworkshop/ui/components/Cards/ToolbarCard';\nimport ThreeColumns from '@openworkshop/ui/components/Layout/ThreeColumns';\nimport { User } from 'oidc-client';\nimport React, { FunctionComponent } from 'react';\nimport {Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { CallbackComponent } from 'redux-oidc';\nimport analytics from '../../lib/analytics';\nimport {MakerverseContext} from '../../lib/Makerverse';\nimport ReconnectRedirect from '../Navigation/ReconnectRedirect';\nimport useStyles from './Styles';\nimport {useMakerverse} from '../../providers';\n\ntype Props = {\n\n};\n\nconst CallbackPage: FunctionComponent<Props> = () => {\n  const makerverse = useMakerverse();\n  const log = useLogger(CallbackPage);\n  const classes = useStyles();\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  const [token, setToken] = React.useState<string | undefined>(undefined);\n\n  function handleSuccess(oidc: User) {\n    log.debug('success', oidc);\n    setError(undefined);\n    analytics.event({\n      category: 'interaction',\n      action: 'logged-in',\n    });\n    setToken(oidc.access_token);\n  }\n\n  function handleError(err: Error) {\n    log.debug(err);\n    setError(err);\n    analytics.event({\n      category: 'interaction',\n      action: 'login-error',\n      label: `${err.name}: ${err.message}`,\n    });\n  }\n\n  const footer = error ? <Typography className={classes.centered} variant=\"subtitle1\">\n    <Link to=\"/login\">\n      <Trans>Return to Login</Trans>\n    </Link>\n  </Typography> : undefined;\n\n  function renderBody() {\n    if (error) {\n      return <AlertList error={error} />;\n    }\n    if (token) {\n      return (\n        // After login, the session needs to be recreated to change the user.\n        <ReconnectRedirect to=\"/\" />\n      );\n    }\n    return (\n      <CallbackComponent\n        userManager={makerverse.ows.authManager}\n        successCallback={handleSuccess}\n        errorCallback={handleError}\n      >\n        <Typography variant=\"subtitle1\" className={classes.centered}>\n          <Trans>Exchanging keys with gatekeeper...</Trans>\n        </Typography>\n      </CallbackComponent>\n    );\n  }\n\n  return (\n    <ThreeColumns>\n      <ToolbarCard\n        title={makerverse.t('Authentication')}\n        footer={footer}\n      >\n        {renderBody()}\n      </ToolbarCard>\n    </ThreeColumns>\n  );\n};\n\nexport default CallbackPage;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/LoginPage.tsx",["305"],"import {\n  Button,\n  Checkbox,\n  CircularProgress,\n  FormControlLabel,\n  Typography,\n} from '@material-ui/core';\nimport { OpenWorkShop } from '@openworkshop/lib';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport {AlertList} from '@openworkshop/ui/components/Alerts';\nimport ToolbarCard from '@openworkshop/ui/components/Cards/ToolbarCard';\nimport ThreeColumns from '@openworkshop/ui/components/Layout/ThreeColumns';\nimport React, { FunctionComponent } from 'react';\nimport {MakerverseUser} from '../../api/graphql';\nimport useStyles from './Styles';\nimport analytics from 'lib/analytics';\nimport settings from 'config/settings';\nimport docs from 'constants/docs';\nimport {useMakerverse} from '../../providers';\n\nconst LoginPage: FunctionComponent = () => {\n  const log = useLogger(LoginPage);\n  const ows = React.useContext(OpenWorkShop);\n  const classes = useStyles();\n  const makerverse = useMakerverse();\n  const [guest, setGuest] = React.useState<MakerverseUser | undefined>(undefined);\n  const [useCookies, setUseCookies] = React.useState<boolean>(false);\n  const [dangerous, setDangerous] = React.useState<boolean>(false);\n  const [authenticating, setAuthenticating] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  //\n  // if (auth.isAuthenticated()) {\n  //   log.debug('Already logged in; redirecting.');\n  //   // return <Redirect to='/home' />;\n  // }\n\n  if (error) log.error(error);\n\n  function handleGuest() {\n    log.debug('guest login');\n  }\n\n  function handleLogin(register: boolean) {\n    log.debug('begin authentication');\n    analytics.event({\n      category: 'interaction',\n      action: register ? 'register' : 'login',\n    });\n    setAuthenticating(true);\n    setError(undefined);\n\n    ows.authManager\n      .createSigninRequest()\n      .then((r) => {\n        const url = register ? r.url.replace('/login?', '/register?') : r.url;\n        window.location.replace(url);\n      })\n      .catch((e) => {\n        setAuthenticating(false);\n        setError(e);\n      });\n  }\n\n  const footer = <Typography variant=\"subtitle2\">\n    {!guest && (\n      <analytics.OutboundLink eventLabel='why_login' to={docs.urlSecurity} target='_blank'>\n        {makerverse.t('Why is it necessary to log in?')}\n      </analytics.OutboundLink>\n    )}\n    {guest && (\n      <div>\n        <FormControlLabel\n          control={<Checkbox checked={useCookies} onChange={() => setUseCookies(!useCookies)} />}\n          label={makerverse.t('Remember me (I consent to cookies)')}\n        />\n        <FormControlLabel\n          control={<Checkbox checked={dangerous} onChange={() => setDangerous(!dangerous)} />}\n          label={makerverse.t('I understand \"guest mode\" is hazardous. ')}\n        />\n        <br />\n        <Button onClick={() => handleGuest()} disabled={authenticating || !dangerous}>\n          {makerverse.t('Continue as Guest')}\n        </Button>\n      </div>\n    )}\n  </Typography>;\n\n  return (\n    <ThreeColumns>\n      <ToolbarCard\n        title={makerverse.t('Login to {{ productName }}', settings)}\n        footer={footer}\n      >\n        <div className={classes.centered}>\n          <AlertList error={error} />\n          <Button\n            className={classes.actionButton}\n            variant='outlined'\n            color='primary'\n            disabled={authenticating}\n            onClick={() => handleLogin(false)}\n          >\n            <img src='/images/logos/makerverse.png' alt='Logo' className={classes.logo1} />\n            {!authenticating && (\n              <span>\n                {makerverse.t('Login')}\n                <br />\n                {makerverse.t('(or Create Account)')}\n              </span>\n            )}\n            {authenticating && <CircularProgress />}\n            <img src='/images/logos/openworkshop.png' alt='Logo' className={classes.logo2} />\n          </Button>\n        </div>\n      </ToolbarCard>\n      <div className={classes.bottom}>\n        <Typography variant='subtitle2'>v. {settings.version.full}</Typography>\n      </div>\n    </ThreeColumns>\n  );\n};\n\nexport default LoginPage;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/Makerverse/MakerverseContext.ts",["306","307","308"],"import { IOpenWorkShop } from '@openworkshop/lib';\nimport React from 'react';\nimport {MakerverseSessionFragment} from '../../api/graphql';\nimport {Workspace} from '../workspaces';\nimport {BackendConnection} from './apollo';\nimport {TTranslateFunc} from '@openworkshop/lib/OpenWorkShop';\nimport { StringMap } from 'i18next';\n\nexport interface IMakerverse {\n  ows: IOpenWorkShop;\n\n  connection: BackendConnection;\n\n  session: MakerverseSessionFragment | undefined;\n\n  workspaces: Workspace[];\n\n  t: TTranslateFunc;\n}\n\n// Contexts require a default value...\nconst msg = 'Invalid access of empty context (use MakerverseProvider).';\nexport class EmptyMakerverse implements IMakerverse {\n  get ows(): IOpenWorkShop { throw new Error(msg); }\n\n  get connection(): BackendConnection { throw new Error(msg); }\n\n  get session(): MakerverseSessionFragment | undefined { throw new Error(msg); }\n\n  get workspaces(): Workspace[] { throw new Error(msg); }\n\n  public t(key: string, opts?: StringMap) { return ''; }\n}\n\nexport const MakerverseContext: React.Context<IMakerverse> = React.createContext<IMakerverse>(new EmptyMakerverse());\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Login/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ReconnectRedirect.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortContext.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/constants/docs.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/App.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/MakerverseHooks.ts",["309","310"],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Docs/index.tsx",["311"],"import {useNetworkStatus} from '@openworkshop/lib/utils/device';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport settings from '../../config/settings';\nimport {OfflineAlertList} from '@openworkshop/ui/components/Alerts';\nimport {useMakerverse} from '../../providers';\n\nconst Docs: FunctionComponent = () => {\n  const isOnline = useNetworkStatus();\n  const makerverse = useMakerverse();\n  const fs = { width: '100%', height: '100%' };\n\n  if (!isOnline) {\n    return <OfflineAlertList feature={makerverse.t('The {{ productName }} documentation', settings)} />;\n  }\n\n  return (\n    <div style={{ ...fs, position: 'absolute', marginLeft: -200 }}>\n      <iframe\n        src=\"http://makerverse.com\"\n        style={{ ...fs, display: 'block', border: 'none', margin: '0 auto' }}\n      />\n    </div>\n  );\n};\n\nexport default Docs;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/index.tsx",["312"],"import React, {FunctionComponent} from 'react';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport {useWorkspace, useWorkspaceEvent} from '../../providers';\nimport {WorkspaceState} from '../../api/graphql';\nimport WorkspaceConnector from './WorkspaceConnector';\nimport {WorkspaceEventType} from '../../lib/workspaces/types';\nimport useStyles from './Styles';\nimport ToolBar from './ToolBar';\n\ninterface OwnProps {\n  id: string;\n}\n\ntype Props = OwnProps;\n\nconst index: FunctionComponent<Props> = (props) => {\n  //const workspaces: Workspaces = useWorkspaces();\n  //const workspace = workspaces.all[props.id];\n  const ports = useSystemPorts();\n  const workspace = useWorkspace(props.id);\n  const classes = useStyles();\n  const port = ports.portMap[workspace.connection.portName];\n\n  useWorkspaceEvent(workspace, WorkspaceEventType.State);\n\n  if (workspace.state !== WorkspaceState.Active) {\n    return <WorkspaceConnector workspaceId={props.id} port={port} />;\n  }\n  // Controls [Axes, Homing, Spindle/Laser, Hotend, Console(?)]\n  // Project [Visualizer, Webcam, Gcode]\n  // Settings [Machine Settings, Calibration, Probe, Test Laser, Edit Workspace]\n\n  return (\n    <React.Fragment>\n      <ToolBar workspace={workspace} />\n    </React.Fragment>\n  );\n};\n\nexport default index;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Settings/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Home/index.tsx",["313"],"import React, { FunctionComponent } from 'react';\nimport {MakerverseContext} from '../../lib/Makerverse';\n\nconst Home: FunctionComponent = () => {\n  const makerverse = React.useContext(MakerverseContext);\n  const hasWorkspaces = makerverse.workspaces.length > 0;\n\n  return (\n    <div>\n      Home\n\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/SideDrawer.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/HeaderBar.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ProtectedRoute.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/NotFound.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/providers/SystemPortHooks.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/WorkspaceCreator/CreateWorkspaceModal.tsx",["314"],"import _ from 'lodash';\nimport { Typography, FormControl, InputLabel, Input, Grid, FormHelperText, FormControlLabel, Checkbox, Fab, useTheme } from '@material-ui/core';\nimport * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport CardDialog from '@openworkshop/ui/components/Cards/CardDialog';\nimport useStyles from './Styles';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport analytics from 'lib/analytics';\nimport docs from '../../constants/docs';\nimport {ICustomizedMachine} from '@openworkshop/lib/api/Machines/CustomizedMachine';\nimport {slugify} from '@openworkshop/lib/utils';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport PortStatus from '../../components/Ports/PortStatus';\nimport {OpenWorkShopIcon} from '@openworkshop/ui/components';\nimport {\n  WorkspaceSettingsInput,\n  useCreateWorkspaceMutation,\n  MachineSettingSettingsInput,\n  MachinePartSettingsInput,\n} from '../../api/graphql';\nimport Colors from '@openworkshop/ui/themes/Colors';\nimport {\n  MachinePartCompleteFragment,\n  MachinePresetSettingPropsFragment\n} from '@openworkshop/lib/api/graphql';\nimport {IAlertMessage, AlertList} from '@openworkshop/ui/components/Alerts';\nimport { Redirect } from 'react-router-dom';\nimport {useMakerverse} from '../../providers';\n\ntype Props = {\n  machine?: ICustomizedMachine;\n  portName?: string;\n  open: boolean;\n  onClose: () => void;\n};\n\nconst CreateWorkspaceModal: React.FunctionComponent<Props> = (props) => {\n  const log = useLogger(CreateWorkspaceModal);\n  const makerverse = useMakerverse();\n  const { open, onClose, machine, portName } = props;\n  const ports = useSystemPorts();\n  const port = portName ? ports.portMap[portName] : undefined;\n  const theme = useTheme();\n  const [preferImperial, setPreferImperial] = React.useState(false);\n  const [autoReconnect, setAutoReconnect] = React.useState(false);\n  const [workspaceName, setWorkspaceName] = React.useState('');\n  const [workspaceId, setWorkspaceId] = React.useState('');\n  const classes = useStyles();\n  const icon = machine?.icon ?? 'xyz';\n  const [createWorkspace, createdWorkspace] = useCreateWorkspaceMutation();\n  const isLoading = createdWorkspace.loading;\n  const canCreate = machine && portName && !isLoading && workspaceName.length >= 3;\n  const [error, setError] = React.useState<IAlertMessage | undefined>(undefined);\n\n  function updateWorkspaceName(name: string) {\n    setWorkspaceName(name);\n    setWorkspaceId(slugify(name));\n  }\n\n  function getSettingsInput(setting: MachinePresetSettingPropsFragment): MachineSettingSettingsInput {\n    return {\n      id: setting.id,\n      key: setting.key,\n      settingType: setting.settingType,\n      title: setting.title,\n      value: setting.value,\n    };\n  }\n\n  function getPartInput(part: MachinePartCompleteFragment): MachinePartSettingsInput {\n    return {\n      dataBlob: part.dataBlob,\n      description: part.description,\n      id: part.id,\n      isDefault: part.isDefault,\n      optional: part.optional,\n      partType: part.partType,\n      title: part.title ?? '',\n      specs: part.specs.map((setting) => {\n        return _.omit(setting, ['__typename']);\n      }),\n      settings: part.settings.map(getSettingsInput),\n    };\n  }\n\n  async function onPressCreate() {\n    if (!machine) {\n      log.error('no machine before create');\n      return;\n    }\n    if (!portName) {\n      log.error('no portName before create');\n      return;\n    }\n\n    // Smush the OWS types into a Workspace.\n    const workspaceSettings: WorkspaceSettingsInput = {\n      id: workspaceId,\n      name: workspaceName,\n      path: `/${workspaceId}`,\n      color: Colors.blue.main,\n      bkColor: theme.palette.background.default,\n      autoReconnect,\n      icon,\n      preferImperial,\n      machineProfileId: machine.profile.machineProfileId ?? null,\n      onboarded: false,\n      axes: Object.values(machine.axes).map((axis) => {\n        return _.omit(axis, ['__typename']);\n      }),\n      commands: machine.commands.map((cmd) => {\n        return _.omit(cmd, ['__typename']);\n      }),\n      connection: {\n        portName,\n        machineProfileId: machine.profile.machineProfileId ?? null,\n        manufacturer: null,\n        firmware: {\n          ..._.omit(machine.firmware, ['__typename']),\n          baudRate: null, // Different enum types; passed as baudRateValue.\n        },\n      },\n      features: machine.features.map((ft) => {\n        return _.omit(ft, ['__typename']);\n      }),\n      parts: machine.parts.map(getPartInput),\n    };\n    log.debug('create workspace', workspaceSettings);\n    setError(undefined);\n\n    try {\n      await createWorkspace({ variables: { workspaceSettings } });\n    } catch (e) {\n      setError(e);\n    }\n  }\n\n  if (createdWorkspace.data && createdWorkspace.data.workspace) {\n    return <Redirect to={`/workspaces/${createdWorkspace.data.workspace.id}`} />;\n  }\n\n  return (\n    <CardDialog\n      open={open}\n      onClose={onClose}\n      title={makerverse.t('Create Workspace')}\n      subHeader={<PortStatus port={port} showType={true} />}\n    >\n      <Grid container spacing={2}>\n        <Grid item xs={12} >\n          <FormControl\n            className={classes.formControl}\n            margin='normal'\n            fullWidth={true}\n            required={true}\n            variant='outlined'\n          >\n            <InputLabel htmlFor='workspace-name'>{makerverse.t('Workspace Name')}</InputLabel>\n            <Input\n              id='workspace-name'\n              name='workspace-name'\n              error={false}\n              type='text'\n              value={workspaceName}\n              autoFocus={true}\n              onChange={(e) => updateWorkspaceName(e.target.value)}\n              startAdornment={<OpenWorkShopIcon name={icon} className={classes.leftButtonIconAdornment} />}\n            />\n            <FormHelperText >{window.location.origin}/workspaces/<strong>{workspaceId}</strong></FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\"><Trans>Personal Preferences</Trans></Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl className={classes.formControl}>\n            <FormControlLabel\n              control={<Checkbox checked={preferImperial} onChange={() => setPreferImperial(!preferImperial)} />}\n              label={makerverse.t('I prefer imperial (inches) to metric (mm)')}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <FormControlLabel\n              control={<Checkbox checked={autoReconnect} onChange={() => setAutoReconnect(!autoReconnect)} />}\n              label={makerverse.t('Automatically (re)connect to the machine when the workspace is opened.')}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\"><Trans>One Last Thing...</Trans></Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\">\n            <Trans>\n              Makerverse is an open-source project with a rich history and ambitious goals.\n              <analytics.OutboundLink\n                eventLabel='learn more'\n                to={docs.urlAbout}\n                target='_blank'>\n                {makerverse.t('Learn More')}\n              </analytics.OutboundLink>\n            </Trans>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: 'center' }} >\n          <FormControl\n            className={classes.formControl}\n          >\n            <Fab\n              color='primary'\n              type='submit'\n              variant='extended'\n              size='large'\n              onClick={onPressCreate}\n              disabled={!canCreate}\n            >\n              <OpenWorkShopIcon name={icon} className={classes.leftButtonIconAdornment} />\n              <Typography variant=\"h6\">{makerverse.t('Start Making Something')}</Typography>\n            </Fab>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <AlertList error={error} />\n        </Grid>\n      </Grid>\n    </CardDialog>\n  );\n};\n\nexport default CreateWorkspaceModal;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/OpenMachinePort.tsx",["315"],"import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faPlug, faPowerOff} from '@fortawesome/free-solid-svg-icons';\nimport {Fab, Grid, Paper, Typography, Modal, FormControl} from '@material-ui/core';\nimport {ICustomizedMachine} from '@openworkshop/lib/api/Machines/CustomizedMachine';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, {FunctionComponent} from 'react';\nimport {Trans, useTranslation} from 'react-i18next';\nimport {HoverHelpStep} from '@openworkshop/ui/components/Alerts';\nimport {\n  FirmwareRequirementInput,\n  MutationOpenPortArgs,\n  PortState,\n  SerialPortOptionsInput,\n  useClosePortMutation,\n  useOpenPortMutation\n} from '../../api/graphql';\nimport PortSelect from '../../components/Ports/PortSelect';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport useStyles from './Styles';\nimport PortConnectionSteps from './PortConnectionSteps';\nimport {AlertList} from '@openworkshop/ui/components/Alerts';\nimport { useMakerverse } from 'providers';\n\ninterface OwnProps {\n  machine: ICustomizedMachine;\n  onConnected: () => void;\n  selectedPortName: string;\n  // Omitting a port name setter implies that the component may not change ports, and thus no selector.\n  // (button-only).\n  setSelectedPortName: ((portName: string) => void) | null;\n}\n\ntype Props = OwnProps;\n\nconst OpenMachinePort: FunctionComponent<Props> = (props) => {\n  const log = useLogger(OpenMachinePort);\n  const makerverse = useMakerverse();\n  const classes = useStyles();\n  const portCollection = useSystemPorts();\n  const [openPort, openedPort] = useOpenPortMutation();\n  const [closePort, closedPort] = useClosePortMutation();\n  const { machine, onConnected, selectedPortName, setSelectedPortName } = props;\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const port = portCollection.portMap[selectedPortName];\n  const isConnected = port && port.connection;\n  const isConnecting = port && port.state === PortState.Opening;\n  const isActive = port && port.state === PortState.Active;\n  const canConnect = machine && port && !isConnected && !isConnecting;\n  const errors = [openedPort.error, closedPort.error, port?.error];\n\n  async function onPressConnect() {\n    // TODO: These may need to be configurable...\n    const opts: SerialPortOptionsInput = {\n      baudRate: machine.firmware.baudRate as number,\n      dataBits: null,\n      handshake: null,\n      parity: null,\n      readBufferSize: null,\n      readTimeout: null,\n      rtsEnable: machine.firmware.rtscts,\n      stopBits: null,\n      writeBufferSize: null,\n      writeTimeout: null,\n    };\n\n    const fw: FirmwareRequirementInput = {\n      name: machine.firmware.name ?? null,\n      edition: machine.firmware.edition ?? null,\n      requiredVersion: machine.firmware.requiredVersion ? machine.firmware.requiredVersion as number : 0,\n      controllerType: machine.firmware.controllerType,\n    };\n\n    const args: MutationOpenPortArgs = {\n      portName: selectedPortName,\n      firmware: fw,\n      options: opts,\n    };\n    log.debug('opening port...', args);\n    try {\n      await openPort({variables: args});\n    } catch (e) {\n      log.error(e, 'failed to open port');\n    }\n  }\n\n  async function onPressDisconnect() {\n    log.debug('closing port', port.portName);\n    try {\n      await closePort({ variables: { portName: port.portName }});\n    } catch (e) {\n      log.error(e, 'disconnection error');\n    }\n  }\n\n  async function onPressCancel() {\n    await onPressDisconnect();\n  }\n\n  React.useEffect(() => {\n    if (isActive) {\n      log.debug('Connection now active; finalize workspace.');\n      onConnected();\n    }\n  }, [isActive, setModalOpen]);\n\n  async function closeModal() {\n    await onPressDisconnect();\n    setModalOpen(false);\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={2} >\n        <Grid item xs={12}>\n          <Typography variant='h5'>\n            <Trans>Connect to your Machine's Port</Trans>\n\n            <HoverHelpStep\n              tip={makerverse.t('Makerverse will attempt to communicate with the device via the port, testing to see if it' +\n                ' understands the output.')}\n              isComplete={false}\n            />\n          </Typography>\n          <Typography variant='body2'>\n            <Trans>The port is the physical connection on the Makerverse host (e.g., USB).</Trans>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={6} style={{ minHeight: 60, paddingTop: 0, marginTop: 0 }} >\n          <PortConnectionSteps port={port} />\n        </Grid>\n        <Grid item xs={12} md={6} className={classes.portSelectItem} style={{ textAlign: 'center' }} >\n          {setSelectedPortName && <React.Fragment>\n            <PortSelect\n              selectedPortName={selectedPortName}\n              setSelectedPortName={setSelectedPortName}\n            />\n          </React.Fragment>}\n          {!isConnected && <FormControl\n            className={classes.formControl}\n          >\n            <Fab\n              color='primary'\n              type='submit'\n              variant='extended'\n              size='large'\n              onClick={canConnect ? onPressConnect : onPressCancel}\n              className={classes.connectionButton}\n              disabled={selectedPortName === ''}\n            >\n              <FontAwesomeIcon className={classes.connectIcon} icon={faPlug} />\n              <Typography variant=\"h6\">{isConnecting ? makerverse.t('Cancel') : makerverse.t('Connect')}</Typography>\n            </Fab>\n          </FormControl>}\n          {isConnected && <FormControl\n            className={classes.formControl}\n          >\n            <Fab\n              color='secondary'\n              type='submit'\n              variant='extended'\n              size='large'\n              onClick={onPressDisconnect}\n              className={classes.connectionButton}\n            >\n              <FontAwesomeIcon className={classes.connectIcon} icon={faPowerOff} />\n              <Typography variant=\"h6\"><Trans>Disconnect</Trans></Typography>\n            </Fab>\n          </FormControl>}\n        </Grid>\n        <Grid item xs={12}>\n          <AlertList errors={errors} />\n        </Grid>\n      </Grid>\n      <Modal\n        open={modalOpen}\n        onClose={closeModal}\n        aria-labelledby=\"modal-create-workspace\"\n        aria-describedby=\"modal-create-workspace\"\n      >\n        <div>Are you sure?</div>\n      </Modal>\n    </Paper>\n  );\n};\n\nexport default OpenMachinePort;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ListMenu.tsx",["316","317","318"],"import _ from 'lodash';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport { OpenWorkShopIcon } from '@openworkshop/ui/components';\nimport React, { FunctionComponent } from 'react';\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Divider,\n  List,\n} from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCogs, faProjectDiagram, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faUsb } from '@fortawesome/free-brands-svg-icons';\nimport { useTranslation } from 'react-i18next';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport {PortStatusFragment} from '../../api/graphql';\nimport {MakerverseContext} from '../../lib/Makerverse';\nimport ListMenuItem from './ListMenuItem';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport WorkspaceStatus from '../Workspaces/WorkspaceStatus';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\ntype Props = OwnProps;\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: theme.mixins.toolbar,\n  }),\n);\n\nconst ListMenu: FunctionComponent<Props> = (props) => {\n  const log = useLogger(ListMenu);\n  const ports = useSystemPorts();\n  const portList: PortStatusFragment[] = Object.values(ports.portMap);\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const makerverse = React.useContext(MakerverseContext);\n  const workspaces = _.sortBy(makerverse.workspaces, ws => ws.name.toLowerCase());\n  const showWorkspaces = makerverse.workspaces.length > 0;\n  const iconStyle = { width: 24, height: 24, marginLeft: -2 };\n\n  function renderRouteItem(route: string, text: string, icon: IconProp, t2?: string) {\n    const i = <FontAwesomeIcon size='lg' style={iconStyle} icon={icon} />;\n    const st = t2 ? <React.Fragment>{t2}</React.Fragment> : undefined;\n    return <ListMenuItem to={route} title={text} icon={i} subcomponent={st} />;\n  }\n\n  return (\n    <div>\n      <div className={classes.toolbar} />\n      {showWorkspaces && <React.Fragment>\n        <Divider />\n        <List>\n          {workspaces.map((workspace) => {\n            const route = `/workspaces/${workspace.id}`;\n            const icon = <OpenWorkShopIcon style={iconStyle} name={workspace.icon ?? 'xyz'} />;\n            const port = portList.length > 0 ?\n              _.find(portList, p => p.portName === workspace.connection.portName) : undefined;\n\n            return <ListMenuItem\n              key={workspace.id}\n              to={route}\n              title={workspace.name}\n              icon={icon}\n              subcomponent={<WorkspaceStatus workspace={workspace} port={port} />}\n            />;\n          })}\n        </List>\n        <Divider />\n      </React.Fragment>}\n      <List>\n        {renderRouteItem('/home', makerverse.t('Projects'), faProjectDiagram, makerverse.t('MakerHub'))}\n        {renderRouteItem('/workspaces', makerverse.t('Connect'), faUsb, makerverse.t('Create a Workspace'))}\n        {renderRouteItem('/settings', makerverse.t('Settings'), faCogs, makerverse.t('& Useful Information'))}\n        {renderRouteItem('/docs', makerverse.t('Documentation'), faQuestionCircle, makerverse.t('& Support Requests'))}\n      </List>\n    </div>\n  );\n};\n\nexport default ListMenu;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/UserMenu.tsx",["319"],"import {faUserShield, faUserSecret} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {Alert, IconButton, Menu, MenuItem, Typography} from '@material-ui/core';\nimport {OpenWorkShop} from '@openworkshop/lib';\nimport {useNetworkStatus} from '@openworkshop/lib/utils/device';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, {FunctionComponent} from 'react';\nimport {Trans, useTranslation} from 'react-i18next';\nimport {useBackendConnectionState, useMakerverse} from '../../providers';\nimport {ConnectionState} from '../../lib/Makerverse/apollo';\n\nconst UserMenu: FunctionComponent = () => {\n  const log = useLogger(UserMenu);\n  const makerverse = useMakerverse();\n  const { isOnline } = useNetworkStatus();\n  // const history = useHistory();\n  const ows = React.useContext(OpenWorkShop);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const connectionState: ConnectionState = useBackendConnectionState();\n  const isConnected = connectionState === ConnectionState.Connected;\n  const { session } = makerverse;\n  const isAuthenticated = !!session;\n\n  const icon = session ? faUserShield : faUserSecret;\n\n  function renderHeader() {\n    if (!isConnected) {\n      return <Alert severity=\"error\">{makerverse.t('Cannot communicate with Makerverse.')}</Alert>;\n    }\n    if (!isOnline) {\n      return <Alert severity=\"warning\">{makerverse.t('You are offline.')}</Alert>;\n    }\n    if (!session) {\n      return <Alert severity=\"warning\">{makerverse.t('You are not logged in. Community features will be unavailable.')}</Alert>;\n    }\n    return <Alert severity=\"info\">{makerverse.t('Welcome, {{ username }}', session.user)}</Alert>;\n  }\n\n  function renderVersion() {\n    return 'Makerverse v1.2.0';\n  }\n\n  log.verbose('online', isOnline, 'authenticated', isAuthenticated);\n\n  return (\n    <div>\n      <IconButton\n        aria-label='account of current user'\n        aria-controls='menu-appbar'\n        aria-haspopup='true'\n        onClick={(e) => setAnchorEl(e.currentTarget)}\n        color='inherit'\n      >\n        <FontAwesomeIcon icon={icon} />\n      </IconButton>\n      <Menu\n        id='menu-appbar'\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        keepMounted\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={open}\n        onClose={() => setAnchorEl(null)}\n      >\n        <Typography variant=\"h6\">\n          {renderHeader()}\n        </Typography>\n        <Typography variant=\"subtitle1\">\n          {renderVersion()}\n        </Typography>\n        <MenuItem\n          onClick={() => {\n            setAnchorEl(null);\n            setTimeout(() => void makerverse.connection.reconnect(), 10);\n          }}>\n          <Trans>Reconnect</Trans>\n        </MenuItem>\n        {isAuthenticated && <MenuItem\n          onClick={() => {\n            setAnchorEl(null);\n            setTimeout(() => void ows.authManager.signoutRedirect(), 10);\n          }}>\n          Logout\n        </MenuItem>}\n      </Menu>\n    </div>\n  );\n};\n\nexport default UserMenu;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortStatus.tsx",["320"],"import useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, {FunctionComponent} from 'react';\nimport {FirmwareRequirementFragment, PortState} from '../../api/graphql';\nimport {useTranslation} from 'react-i18next';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faUsb} from '@fortawesome/free-brands-svg-icons';\nimport {faExclamationCircle, faMicrochip, faPlug} from '@fortawesome/free-solid-svg-icons';\nimport {Typography, useTheme} from '@material-ui/core';\nimport {IMaybeHavePortStatus} from './types';\n\ninterface OwnProps {\n  showType?: boolean;\n  showName?: boolean;\n}\n\ntype Props = IMaybeHavePortStatus & OwnProps;\n\nconst PortStatus: FunctionComponent<Props> = (props) => {\n  const { t } = useTranslation();\n  const log = useLogger(PortStatus);\n  const theme = useTheme();\n  const { port, showType, showName } = props;\n  const portName = port ? port.portName : undefined;\n  const st = port ? port.state : PortState.Unplugged;\n\n  function getPortStatusText() {\n    if (!port || st === PortState.Unplugged) return t('Unplugged');\n\n    if (st === PortState.Error) return t('Error');\n    if (st === PortState.HasFirmware) return t('Handshaking');\n    if (st === PortState.Ready) return t('Available');\n    if (st === PortState.Startup) return t('Startup');\n    if (st === PortState.Opening) return t('Connecting');\n    if (st === PortState.HasData) return t('Querying');\n\n    // It is active, but what kind?\n    if (port.connection) {\n      if (port.connection.status.bytesToRead > 0) return t('Reading');\n      if (port.connection.status.bytesToWrite > 0) return t('Writing');\n    }\n    return t('Active');\n  }\n\n  function getPortColor() {\n    if (!port || st === PortState.Unplugged) return theme.palette.grey.A400;\n    if (st === PortState.Error) return theme.palette.error.main;\n    if (st === PortState.Ready) return theme.palette.primary.light;\n\n    const activeStates = [PortState.Opening, PortState.Startup, PortState.HasData, PortState.HasFirmware];\n    const hasData = port.connection &&\n      (port.connection.status.bytesToRead > 0 || port.connection.status.bytesToWrite > 0);\n    if ((st && activeStates.includes(st)) || hasData) return theme.palette.secondary.dark;\n\n    if (st === PortState.Active) return theme.palette.primary.light;\n\n    return theme.palette.grey.A700;\n  }\n\n  function getPortIcon() {\n    if (!port || st === PortState.Unplugged) return faUsb;\n    if (port.state === PortState.Error) return faExclamationCircle;\n    if (!port.connection) return faUsb;\n    if (port.state === PortState.Active) return faMicrochip;\n    return faPlug;\n  }\n\n  const color = getPortColor();\n  log.verbose('port', portName, 'status', st);\n\n  return (\n    <React.Fragment >\n      {showType && port && port.connection && <Typography variant=\"subtitle1\">\n        [{port.connection.machine.firmwareRequirement.controllerType}]\n      </Typography>}\n      {showName && port && port.portName && <Typography variant=\"subtitle2\">\n        {port.portName}\n      </Typography>}\n      <FontAwesomeIcon color={color} icon={ getPortIcon() } style={{ marginRight: theme.spacing(1) }} />\n      {' '}{getPortStatusText()}\n    </React.Fragment>\n  );\n};\n\nexport default PortStatus;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortSelect.tsx",["321"],"import {AlertList} from '@openworkshop/ui/components/Alerts';\nimport {\n  Container,\n  FormControl,\n  InputLabel,\n  ListItemIcon,\n  MenuItem,\n  Select,\n  Typography,\n  useTheme\n} from '@material-ui/core';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, {FunctionComponent} from 'react';\nimport {Trans, useTranslation} from 'react-i18next';\nimport {IPortCollection} from '../../providers/SystemPortContext';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport PortStatus from './PortStatus';\nimport useStyles from './Styles';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport {PortState} from '../../api/graphql';\nimport {useMakerverse} from '../../providers';\n\ninterface OwnProps {\n  selectedPortName: string;\n  setSelectedPortName: (id: string) => void;\n}\n\ntype Props = OwnProps;\n\nconst PortSelect: FunctionComponent<Props> = (props) => {\n  const classes = useStyles();\n  const makerverse = useMakerverse();\n  const theme = useTheme();\n  const log = useLogger(PortSelect);\n  const portCollection: IPortCollection = useSystemPorts();\n  const { selectedPortName, setSelectedPortName } = props;\n  const port = portCollection.portMap[selectedPortName];\n\n  log.verbose(port, selectedPortName, portCollection);\n\n  function onSelectedPort(e: React.ChangeEvent<{ value: unknown }>) {\n    const portName = e.target.value as string;\n    log.debug('selected port', portName);\n    setSelectedPortName(portName);\n  }\n\n  function renderPort(portName: string) {\n    const port = portCollection.portMap[portName];\n    return (\n      <MenuItem key={port.portName} value={port.portName}>\n        <ListItemIcon className={classes.portMenuIcon} >\n          <Typography variant=\"subtitle2\"><PortStatus port={port} /></Typography>\n        </ListItemIcon>\n        <Typography variant=\"subtitle1\">{port.portName}</Typography>\n      </MenuItem>\n    );\n  }\n\n  function getHelperText(): string | undefined {\n    if (!port) return makerverse.t('Required');\n    if (port.state === PortState.Error) return port.error?.name ?? makerverse.t('Cannot connect to machine.');\n    if (port.state === PortState.Ready) return makerverse.t('The port must not be in-use by any other programs.');\n    return '';\n  }\n\n  const helperColor = !port || port.error ? theme.palette.error.main : theme.palette.grey.A700;\n\n  return (\n    <Container>\n      <FormControl required variant=\"outlined\" className={classes.formControl}>\n        <InputLabel ><Trans>Port Name</Trans></InputLabel>\n        <Select\n          value={selectedPortName}\n          onChange={onSelectedPort}\n          label=\"Port Name\"\n        >\n          <MenuItem value=\"\">\n            <em><Trans>Please select a port</Trans></em>\n          </MenuItem>\n          {portCollection.sortedPortNames.map(renderPort)}\n        </Select>\n        <FormHelperText style={{ color: helperColor.toString() }}>{getHelperText()}</FormHelperText>\n        <AlertList errors={portCollection.errors} />\n      </FormControl>\n    </Container>\n  );\n};\n\nexport default PortSelect;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Ports/PortConnectionSteps.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Navigation/ListMenuItem.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Modals/BackendDiconnectedModal.tsx",["322"],"import * as React from 'react';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport {ConnectionState} from '../../lib/Makerverse/apollo';\nimport {useBackendConnectionState, useMakerverse} from '../../providers';\nimport CardDialog from '@openworkshop/ui/components/Cards/CardDialog';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport { Trans, useTranslation } from 'react-i18next';\n\nconst BackendDiconnectedModal: React.FunctionComponent = () => {\n  const log = useLogger(BackendDiconnectedModal);\n  const makerverse = useMakerverse();\n  const connectionState: ConnectionState = useBackendConnectionState();\n  const [timedOut, setTimedOut] = React.useState(false);\n  const isConnected = connectionState === ConnectionState.Connected;\n\n  React.useEffect(() => {\n    log.debug('connected?', connectionState);\n    if (!isConnected) {\n      if (timedOut) {\n        setTimedOut(false);\n        window.location.reload();\n        return;\n      }\n      setTimeout(() => {\n        setTimedOut(true);\n      }, 30000);\n    } else {\n      setTimedOut(false);\n    }\n  }, [connectionState, isConnected, timedOut]);\n\n  return (\n    <CardDialog\n      open={!isConnected} title={makerverse.t('Disconnected')} onClose={() => log.warn('close forbidden')}\n    >\n      <div style={{ textAlign: 'center' }}>\n        <CircularProgress />\n        <Typography variant=\"h6\"><Trans>Trying to Reconnect...</Trans></Typography>\n      </div>\n    </CardDialog>\n  );\n};\n\nexport default BackendDiconnectedModal;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/WorkspaceConnector.tsx",["323"],"import * as React from 'react';\nimport ThreeColumns from '@openworkshop/ui/components/Layout/ThreeColumns';\nimport ToolbarCard from '@openworkshop/ui/components/Cards/ToolbarCard';\nimport PortConnectionSteps from '../../components/Ports/PortConnectionSteps';\nimport PortStatus from '../../components/Ports/PortStatus';\nimport {IHaveWorkspaceId} from '../../components/Workspaces';\nimport {useWorkspace} from '../../providers';\nimport {useSystemPorts} from '../../providers/SystemPortHooks';\nimport { Grid } from '@material-ui/core';\nimport {IMaybeHavePortStatus} from '../../components/Ports/types';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport OpenWorkspaceButton from './OpenWorkspaceButton';\n\ntype Props = IHaveWorkspaceId & IMaybeHavePortStatus;\n\nconst WorkspaceConnector: React.FunctionComponent<Props> = (props) => {\n  const log = useLogger(WorkspaceConnector);\n  // const { t } = useTranslation();\n  const { workspaceId } = props;\n  const ports = useSystemPorts();\n  const workspace = useWorkspace(workspaceId);\n  const portName = workspace.connection.portName;\n  const port = ports.portMap[portName];\n\n  return (\n    <ThreeColumns size=\"md\" >\n      <ToolbarCard\n        title={workspace.name}\n        subHeader={<PortStatus showType={true} showName={true} port={port} />}\n        footer={<OpenWorkspaceButton workspace={workspace} />}\n      >\n        <Grid container>\n          <Grid item xs={2} />\n          <Grid item xs={8} style={{ justifyContent: 'center' }}>\n            <PortConnectionSteps port={port} />\n          </Grid>\n          <Grid item xs={2} />\n        </Grid>\n      </ToolbarCard>\n    </ThreeColumns>\n  );\n};\n\nexport default WorkspaceConnector;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Workspaces/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/lib/workspaces/types.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Workspaces/WorkspaceStatus.tsx",["324"],"import * as React from 'react';\nimport {IHaveWorkspace} from './types';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport PortStatus from '../Ports/PortStatus';\nimport {IMaybeHavePortStatus} from '../Ports/types';\nimport {WorkspaceState} from '../../api/graphql';\nimport {faUsb} from '@fortawesome/free-brands-svg-icons';\nimport {faDraftingCompass, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {useTheme} from '@material-ui/core';\nimport {useTranslation} from 'react-i18next';\nimport {useWorkspaceEvent} from '../../providers';\nimport {WorkspaceEventType} from '../../lib/workspaces/types';\n\ntype Props = IHaveWorkspace & IMaybeHavePortStatus;\n\nconst WorkspaceStatus: React.FunctionComponent<Props> = (props) => {\n  const { t } = useTranslation();\n  const log = useLogger(WorkspaceStatus);\n  const { workspace, port } = props;\n  const st = workspace.state;\n  const theme = useTheme();\n\n  useWorkspaceEvent(workspace, WorkspaceEventType.State);\n\n  if (st === WorkspaceState.Opening) return <PortStatus port={port} />;\n\n  function getStatusText() {\n    if (!workspace || st === WorkspaceState.Disconnected) return t('Unplugged');\n    if (st === WorkspaceState.Closed) return t('Closed');\n    if (st === WorkspaceState.Deleted) return t('Deleted');\n    if (st === WorkspaceState.Error) return t('Error');\n    if (st === WorkspaceState.Active) return t('Active');\n    return st.toString() + '?';\n  }\n\n  function getIcon() {\n    if (!workspace || st === WorkspaceState.Disconnected) return faUsb;\n    if (st === WorkspaceState.Error || st === WorkspaceState.Deleted) return faExclamationCircle;\n    if (st === WorkspaceState.Active) return faDraftingCompass;\n    return faUsb;\n  }\n\n  function getColor() {\n    if (!workspace || st === WorkspaceState.Disconnected) return theme.palette.grey.A400;\n    if (st === WorkspaceState.Closed) return theme.palette.grey.A700;\n    if (st === WorkspaceState.Error || st === WorkspaceState.Deleted) return theme.palette.error.main;\n    if (st === WorkspaceState.Active) return theme.palette.primary.main;\n    return theme.palette.secondary.main;\n  }\n\n  const color = getColor();\n\n  return (\n    <React.Fragment >\n      <FontAwesomeIcon color={color} icon={getIcon()} style={{ marginRight: theme.spacing(1) }} />\n      {' '}{getStatusText()}\n    </React.Fragment>\n  );\n};\n\nexport default WorkspaceStatus;\n","/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/Styles.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/OpenWorkspaceButton.tsx",["325"],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/views/Workspace/ToolBar.tsx",["326","327","328","329","330"],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/index.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/types.ts",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Console/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Console/Console.tsx",["331"],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/WorkspaceSettings/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Plans/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Machine/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Controls/index.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/WorkspaceSettings/WorkspaceSettings.tsx",["332"],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Machine/Machine.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Controls/Controls.tsx",[],"/Users/zaneclaes/OWS/OWE/Makerverse/App/src/components/Tools/Plans/Plans.tsx",["333"],{"ruleId":"334","severity":1,"message":"335","line":5,"column":47,"nodeType":"336","messageId":"337","endLine":5,"endColumn":51},{"ruleId":"334","severity":1,"message":"338","line":22,"column":11,"nodeType":"336","messageId":"337","endLine":22,"endColumn":12},{"ruleId":"334","severity":1,"message":"339","line":5,"column":10,"nodeType":"336","messageId":"337","endLine":5,"endColumn":24},{"ruleId":"334","severity":1,"message":"340","line":1,"column":8,"nodeType":"336","messageId":"337","endLine":1,"endColumn":17},{"ruleId":"334","severity":1,"message":"339","line":8,"column":16,"nodeType":"336","messageId":"337","endLine":8,"endColumn":30},{"ruleId":"334","severity":1,"message":"341","line":12,"column":9,"nodeType":"336","messageId":"337","endLine":12,"endColumn":26},{"ruleId":"334","severity":1,"message":"342","line":26,"column":17,"nodeType":"336","messageId":"337","endLine":26,"endColumn":25},{"ruleId":"343","severity":1,"message":"344","line":32,"column":3,"nodeType":"345","messageId":"346","endLine":32,"endColumn":42},{"ruleId":"334","severity":1,"message":"347","line":32,"column":12,"nodeType":"336","messageId":"337","endLine":32,"endColumn":23},{"ruleId":"334","severity":1,"message":"348","line":32,"column":25,"nodeType":"336","messageId":"337","endLine":32,"endColumn":41},{"ruleId":"334","severity":1,"message":"349","line":7,"column":8,"nodeType":"336","messageId":"337","endLine":7,"endColumn":20},{"ruleId":"343","severity":1,"message":"344","line":57,"column":8,"nodeType":"350","messageId":"346","endLine":57,"endColumn":32},{"ruleId":"334","severity":1,"message":"339","line":3,"column":10,"nodeType":"336","messageId":"337","endLine":3,"endColumn":24},{"ruleId":"334","severity":1,"message":"351","line":21,"column":9,"nodeType":"336","messageId":"337","endLine":21,"endColumn":16},{"ruleId":"334","severity":1,"message":"352","line":6,"column":9,"nodeType":"336","messageId":"337","endLine":6,"endColumn":22},{"ruleId":"334","severity":1,"message":"339","line":4,"column":17,"nodeType":"336","messageId":"337","endLine":4,"endColumn":31},{"ruleId":"334","severity":1,"message":"339","line":7,"column":16,"nodeType":"336","messageId":"337","endLine":7,"endColumn":30},{"ruleId":"334","severity":1,"message":"353","line":34,"column":45,"nodeType":"336","messageId":"337","endLine":34,"endColumn":50},{"ruleId":"334","severity":1,"message":"354","line":35,"column":9,"nodeType":"336","messageId":"337","endLine":35,"endColumn":12},{"ruleId":"334","severity":1,"message":"338","line":38,"column":11,"nodeType":"336","messageId":"337","endLine":38,"endColumn":12},{"ruleId":"334","severity":1,"message":"339","line":8,"column":16,"nodeType":"336","messageId":"337","endLine":8,"endColumn":30},{"ruleId":"334","severity":1,"message":"355","line":3,"column":9,"nodeType":"336","messageId":"337","endLine":3,"endColumn":36},{"ruleId":"334","severity":1,"message":"339","line":14,"column":16,"nodeType":"336","messageId":"337","endLine":14,"endColumn":30},{"ruleId":"334","severity":1,"message":"339","line":7,"column":17,"nodeType":"336","messageId":"337","endLine":7,"endColumn":31},{"ruleId":"334","severity":1,"message":"354","line":17,"column":9,"nodeType":"336","messageId":"337","endLine":17,"endColumn":12},{"ruleId":"334","severity":1,"message":"354","line":19,"column":9,"nodeType":"336","messageId":"337","endLine":19,"endColumn":12},{"ruleId":"334","severity":1,"message":"356","line":39,"column":12,"nodeType":"336","messageId":"337","endLine":39,"endColumn":29},{"ruleId":"334","severity":1,"message":"357","line":1,"column":44,"nodeType":"336","messageId":"337","endLine":1,"endColumn":47},{"ruleId":"334","severity":1,"message":"358","line":1,"column":49,"nodeType":"336","messageId":"337","endLine":1,"endColumn":53},{"ruleId":"334","severity":1,"message":"359","line":6,"column":22,"nodeType":"336","messageId":"337","endLine":6,"endColumn":29},{"ruleId":"334","severity":1,"message":"360","line":8,"column":9,"nodeType":"336","messageId":"337","endLine":8,"endColumn":17},{"ruleId":"334","severity":1,"message":"361","line":8,"column":78,"nodeType":"336","messageId":"337","endLine":8,"endColumn":89},{"ruleId":"334","severity":1,"message":"353","line":7,"column":50,"nodeType":"336","messageId":"337","endLine":7,"endColumn":55},{"ruleId":"334","severity":1,"message":"353","line":7,"column":60,"nodeType":"336","messageId":"337","endLine":7,"endColumn":65},{"ruleId":"334","severity":1,"message":"353","line":7,"column":48,"nodeType":"336","messageId":"337","endLine":7,"endColumn":53},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'t' is assigned a value but never used.","'useTranslation' is defined but never used.","'Workspace' is defined but never used.","'MakerverseContext' is defined but never used.","'setGuest' is assigned a value but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionExpression","missingReturnType","'key' is defined but never used.","'opts' is defined but never used.","'OpenWorkShop' is defined but never used.","FunctionDeclaration","'classes' is assigned a value but never used.","'hasWorkspaces' is assigned a value but never used.","'props' is defined but never used.","'log' is assigned a value but never used.","'FirmwareRequirementFragment' is defined but never used.","'onPressDisconnect' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Popover' is defined but never used.","'GearIcon' is defined but never used.","'EndMillIcon' is defined but never used."]