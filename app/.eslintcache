[{"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/index.ts":"1","/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/CallbackPage.tsx":"2","/Users/zaneclaes/OWS/Makerverse/App/src/views/Docs/index.tsx":"3","/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/workspace-axis.ts":"4","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/UserMenu.tsx":"5","/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/LoginPage.tsx":"6","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ListMenu.tsx":"7","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/MakerverseContext.ts":"8","/Users/zaneclaes/OWS/Makerverse/App/src/views/index.ts":"9","/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/index.ts":"10","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/index.tsx":"11","/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/active-state.ts":"12","/Users/zaneclaes/OWS/Makerverse/App/src/constants/docs.ts":"13","/Users/zaneclaes/OWS/Makerverse/App/src/views/WorkspaceCreator/index.tsx":"14","/Users/zaneclaes/OWS/Makerverse/App/src/api/graphql.tsx":"15","/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/Styles.ts":"16","/Users/zaneclaes/OWS/Makerverse/App/src/store/redux.ts":"17","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/Styles.ts":"18","/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/workspace.ts":"19","/Users/zaneclaes/OWS/Makerverse/App/src/views/WorkspaceCreator/Styles.ts":"20","/Users/zaneclaes/OWS/Makerverse/App/src/lib/semvers.ts":"21","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/HeaderBar.tsx":"22","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ListMenuItem.tsx":"23","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/NotFound.tsx":"24","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/SideDrawer.tsx":"25","/Users/zaneclaes/OWS/Makerverse/App/src/lib/analytics.ts":"26","/Users/zaneclaes/OWS/Makerverse/App/src/views/Workspace/index.tsx":"27","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ProtectedRoute.tsx":"28","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/Workspaces.ts":"29","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/Hooks.ts":"30","/Users/zaneclaes/OWS/Makerverse/App/src/views/App.tsx":"31","/Users/zaneclaes/OWS/Makerverse/App/src/views/MakerverseProvider.tsx":"32","/Users/zaneclaes/OWS/Makerverse/App/src/lib/suspend.ts":"33","/Users/zaneclaes/OWS/Makerverse/App/src/views/Home/index.tsx":"34","/Users/zaneclaes/OWS/Makerverse/App/src/views/Settings/index.tsx":"35","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/types.ts":"36","/Users/zaneclaes/OWS/Makerverse/App/src/views/ProtectedApp.tsx":"37","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/apollo.ts":"38","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/reducers.ts":"39"},{"size":116,"mtime":1606082835097,"results":"40","hashOfConfig":"41"},{"size":2801,"mtime":1606327522539,"results":"42","hashOfConfig":"43"},{"size":831,"mtime":1605895348786,"results":"44","hashOfConfig":"43"},{"size":4959,"mtime":1606241698259,"results":"45","hashOfConfig":"43"},{"size":3247,"mtime":1606328214541,"results":"46","hashOfConfig":"43"},{"size":4325,"mtime":1606179371829,"results":"47","hashOfConfig":"43"},{"size":2306,"mtime":1606244948709,"results":"48","hashOfConfig":"43"},{"size":797,"mtime":1606248693311,"results":"49","hashOfConfig":"43"},{"size":252,"mtime":1605977384904,"results":"50","hashOfConfig":"43"},{"size":110,"mtime":1605810123128,"results":"51","hashOfConfig":"41"},{"size":842,"mtime":1605826281284,"results":"52","hashOfConfig":"43"},{"size":9893,"mtime":1605747749094,"results":"53","hashOfConfig":"43"},{"size":107,"mtime":1605716721482,"results":"54","hashOfConfig":"43"},{"size":1150,"mtime":1606335696496,"results":"55","hashOfConfig":"43"},{"size":29652,"mtime":1606139810250,"results":"56","hashOfConfig":"57"},{"size":1146,"mtime":1606155670333,"results":"58","hashOfConfig":"43"},{"size":1085,"mtime":1606319571150,"results":"59","hashOfConfig":"43"},{"size":2302,"mtime":1605970335421,"results":"60","hashOfConfig":"43"},{"size":17127,"mtime":1606242103838,"results":"61","hashOfConfig":"43"},{"size":280,"mtime":1606329480059,"results":"62","hashOfConfig":"43"},{"size":1031,"mtime":1605726040464,"results":"63","hashOfConfig":"43"},{"size":1453,"mtime":1606240046501,"results":"64","hashOfConfig":"43"},{"size":1320,"mtime":1606227664785,"results":"65","hashOfConfig":"43"},{"size":380,"mtime":1605811998908,"results":"66","hashOfConfig":"43"},{"size":1279,"mtime":1605825469025,"results":"67","hashOfConfig":"43"},{"size":2104,"mtime":1606243840960,"results":"68","hashOfConfig":"43"},{"size":347,"mtime":1606242406319,"results":"69","hashOfConfig":"43"},{"size":944,"mtime":1605811448830,"results":"70","hashOfConfig":"43"},{"size":2290,"mtime":1606240779634,"results":"71","hashOfConfig":"43"},{"size":236,"mtime":1606240131658,"results":"72","hashOfConfig":"43"},{"size":1991,"mtime":1606244715674,"results":"73","hashOfConfig":"43"},{"size":4130,"mtime":1606327313357,"results":"74","hashOfConfig":"43"},{"size":673,"mtime":1606233875442,"results":"75","hashOfConfig":"43"},{"size":338,"mtime":1606245292423,"results":"76","hashOfConfig":"43"},{"size":170,"mtime":1605811767094,"results":"77","hashOfConfig":"43"},{"size":516,"mtime":1606319024702,"results":"78","hashOfConfig":"43"},{"size":2274,"mtime":1606321173160,"results":"79","hashOfConfig":"43"},{"size":2602,"mtime":1606328023449,"results":"80","hashOfConfig":"43"},{"size":515,"mtime":1606319024700,"results":"81","hashOfConfig":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pz68q5",{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},"1999au8",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":20,"warningCount":29,"fixableErrorCount":4,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},"5e1ei5",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"87"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"101"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/index.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/CallbackPage.tsx",["175","176","177","178"],"import {Typography } from '@material-ui/core';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport AlertList from '@openworkshop/ui/components/Alerts/AlertList';\nimport ToolbarCard from '@openworkshop/ui/components/Cards/ToolbarCard';\nimport ThreeColumns from '@openworkshop/ui/components/Layout/ThreeColumns';\nimport { User } from 'oidc-client';\nimport React, { FunctionComponent } from 'react';\nimport {Trans, useTranslation } from 'react-i18next';\nimport { Link, Redirect } from 'react-router-dom';\nimport { CallbackComponent } from 'redux-oidc';\nimport analytics from '../../lib/analytics';\nimport {MakerverseContext} from '../../lib/Makerverse';\nimport ReconnectRedirect from '../Navigation/ReconnectRedirect';\nimport useStyles from './Styles';\n\ninterface OwnProps {\n  children: React.ReactNode;\n}\n\ntype Props = OwnProps;\n\nconst CallbackPage: FunctionComponent<Props> = (props) => {\n  const { t } = useTranslation();\n  const log = useLogger(CallbackPage);\n  const classes = useStyles();\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  const [token, setToken] = React.useState<string | undefined>(undefined);\n  const makerverse = React.useContext(MakerverseContext);\n\n  const isLoading = !error && !token;\n\n  function handleSuccess(oidc: User) {\n    log.debug('success', oidc);\n    setError(undefined);\n    analytics.event({\n      category: 'interaction',\n      action: 'logged-in',\n    });\n    setToken(oidc.access_token);\n  }\n\n  function handleError(err: Error) {\n    log.debug(err);\n    setError(err);\n    analytics.event({\n      category: 'interaction',\n      action: 'login-error',\n      label: `${err.name}: ${err.message}`,\n    });\n  }\n\n  function renderError(err: Error) {\n    return <AlertList error={err} />;\n  }\n\n  const footer = error ? <Typography className={classes.centered} variant=\"subtitle1\">\n    <Link to=\"/login\">\n      <Trans>Return to Login</Trans>\n    </Link>\n  </Typography> : undefined;\n\n  function renderBody() {\n    if (error) {\n      return <AlertList error={error} />;\n    }\n    if (token) {\n      return (\n        // After login, the session needs to be recreated to change the user.\n        <ReconnectRedirect to=\"/\" />\n      );\n    }\n    return (\n      <CallbackComponent\n        userManager={makerverse.ows.authManager}\n        successCallback={handleSuccess}\n        errorCallback={handleError}\n      >\n        <Typography variant=\"subtitle1\" className={classes.centered}>\n          <Trans>Exchanging keys with gatekeeper...</Trans>\n        </Typography>\n      </CallbackComponent>\n    );\n  }\n\n  return (\n    <ThreeColumns>\n      <ToolbarCard\n        title={t('Authentication')}\n        footer={footer}\n      >\n        {renderBody()}\n      </ToolbarCard>\n    </ThreeColumns>\n  );\n};\n\nexport default CallbackPage;\n",[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/Docs/index.tsx",[],[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/workspace-axis.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/UserMenu.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/LoginPage.tsx",["179","180","181","182","183","184","185","186","187","188"],"import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  CircularProgress,\n  FormControlLabel,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { OpenWorkShop } from '@openworkshop/lib';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport AlertList from '@openworkshop/ui/components/Alerts/AlertList';\nimport CardFooter from '@openworkshop/ui/components/Cards/CardFooter';\nimport ToolbarCard from '@openworkshop/ui/components/Cards/ToolbarCard';\nimport ThreeColumns from '@openworkshop/ui/components/Layout/ThreeColumns';\nimport React, { FunctionComponent } from 'react';\nimport {MakerverseUser} from '../../api/graphql';\nimport useStyles from './Styles';\nimport analytics from 'lib/analytics';\nimport settings from 'config/settings';\nimport docs from 'constants/docs';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation } from 'react-router-dom';\n\ninterface OwnProps {\n  children: React.ReactNode;\n}\n\ntype Props = OwnProps;\n\nconst LoginPage: FunctionComponent<Props> = (props) => {\n  const log = useLogger(LoginPage);\n  const ows = React.useContext(OpenWorkShop);\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [guest, setGuest] = React.useState<MakerverseUser | undefined>(undefined);\n  const [useCookies, setUseCookies] = React.useState<boolean>(false);\n  const [dangerous, setDangerous] = React.useState<boolean>(false);\n  const [authenticating, setAuthenticating] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<Error | undefined>(undefined);\n  //\n  // if (auth.isAuthenticated()) {\n  //   log.debug('Already logged in; redirecting.');\n  //   // return <Redirect to='/home' />;\n  // }\n\n  if (error) log.error(error);\n\n  function handleGuest() {\n    log.debug('guest login');\n  }\n\n  function handleLogin(register: boolean) {\n    log.debug('begin authentication');\n    analytics.event({\n      category: 'interaction',\n      action: register ? 'register' : 'login',\n    });\n    setAuthenticating(true);\n    setError(undefined);\n\n    ows.authManager\n      .createSigninRequest()\n      .then((r) => {\n        const url = register ? r.url.replace('/login?', '/register?') : r.url;\n        window.location.replace(url);\n      })\n      .catch((e) => {\n        setAuthenticating(false);\n        setError(e);\n      });\n  }\n\n  const footer = <Typography variant=\"subtitle2\">\n    {!guest && (\n      <analytics.OutboundLink eventLabel='why_login' to={docs.urlSecurity} target='_blank'>\n        {t('Why is it necessary to log in?')}\n      </analytics.OutboundLink>\n    )}\n    {guest && (\n      <div>\n        <FormControlLabel\n          control={<Checkbox checked={useCookies} onChange={() => setUseCookies(!useCookies)} />}\n          label={t('Remember me (I consent to cookies)')}\n        />\n        <FormControlLabel\n          control={<Checkbox checked={dangerous} onChange={() => setDangerous(!dangerous)} />}\n          label={t('I understand \"guest mode\" is hazardous. ')}\n        />\n        <br />\n        <Button onClick={() => handleGuest()} disabled={authenticating || !dangerous}>\n          {t('Continue as Guest')}\n        </Button>\n      </div>\n    )}\n  </Typography>;\n\n  return (\n    <ThreeColumns>\n      <ToolbarCard\n        title={t('Login to {{ productName }}', settings)}\n        footer={footer}\n      >\n        <AlertList error={error} />\n        <div className={classes.centered}>\n          <Button\n            className={classes.actionButton}\n            variant='outlined'\n            color='primary'\n            disabled={authenticating}\n            onClick={() => handleLogin(false)}\n          >\n            <img src='/images/logos/makerverse.png' alt='Logo' className={classes.logo1} />\n            {!authenticating && (\n              <span>\n                {t('Login')}\n                <br />\n                {t('(or Create Account)')}\n              </span>\n            )}\n            {authenticating && <CircularProgress />}\n            <img src='/images/logos/openworkshop.png' alt='Logo' className={classes.logo2} />\n          </Button>\n        </div>\n      </ToolbarCard>\n      <div className={classes.bottom}>\n        <Typography variant='subtitle2'>v. {settings.version.full}</Typography>\n      </div>\n    </ThreeColumns>\n  );\n};\n\nexport default LoginPage;\n","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ListMenu.tsx",["189","190"],"import useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport { OpenWorkShopIcon } from '@openworkshop/ui/components';\nimport React, { FunctionComponent } from 'react';\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Divider,\n  List,\n} from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCogs, faHome, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faUsb } from '@fortawesome/free-brands-svg-icons';\nimport { useTranslation } from 'react-i18next';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport {MakerverseContext} from '../../lib/Makerverse';\nimport ListMenuItem from './ListMenuItem';\n\ninterface OwnProps {\n  isPermanent: boolean;\n}\n\ntype Props = OwnProps;\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: theme.mixins.toolbar,\n  }),\n);\n\nconst ListMenu: FunctionComponent<Props> = (props) => {\n  const log = useLogger(ListMenu);\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const makerverse = React.useContext(MakerverseContext);\n  const showWorkspaces = makerverse.workspaces.length > 0;\n  const iconStyle = { width: 24, height: 24, marginLeft: -2 };\n\n  function renderRouteItem(route: string, text: string, icon: IconProp, t2?: string) {\n    const i = <FontAwesomeIcon size='lg' style={iconStyle} icon={icon} />;\n    return <ListMenuItem to={route} title={text} icon={i} subtitle={t2} />;\n  }\n\n  return (\n    <div>\n      <div className={classes.toolbar} />\n      {showWorkspaces && <React.Fragment>\n        <Divider />\n        <List>\n          {makerverse.workspaces.map((workspace) => {\n            const route = `/workspaces/${workspace.id}`;\n            const icon = <OpenWorkShopIcon style={iconStyle} name={workspace.icon ?? 'xyz'} />;\n\n            return <ListMenuItem key={workspace.id} to={route} title={workspace.name} icon={icon} />;\n          })}\n        </List>\n        <Divider />\n      </React.Fragment>}\n      <List>\n        {renderRouteItem('/home', t('Home'), faHome)}\n        {renderRouteItem('/workspaces', t('Connect'), faUsb)}\n        {renderRouteItem('/settings', t('Settings'), faCogs)}\n        {renderRouteItem('/docs', t('Documentation'), faQuestionCircle)}\n      </List>\n    </div>\n  );\n};\n\nexport default ListMenu;\n",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/MakerverseContext.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/index.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/index.ts",[],[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/index.tsx",[],[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/active-state.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/constants/docs.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/WorkspaceCreator/index.tsx",["191"],"/Users/zaneclaes/OWS/Makerverse/App/src/api/graphql.tsx",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1. */\n  Long: any;\n  /** The built-in `Decimal` scalar type. */\n  Decimal: any;\n};\n\nexport type AppUpdates = {\n  __typename?: 'AppUpdates';\n  checkForUpdates: Scalars['Boolean'];\n  prereleases: Scalars['Boolean'];\n};\n\nexport type CommandSettings = {\n  __typename?: 'CommandSettings';\n  commands: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id: Scalars['String'];\n  mtime: Scalars['Long'];\n  title: Scalars['String'];\n};\n\nexport type ConnectionSettings = {\n  __typename?: 'ConnectionSettings';\n  firmware: MachineFirmwareSettings;\n  manufacturer: Maybe<Scalars['String']>;\n  port: Scalars['String'];\n};\n\nexport type EventSettings = {\n  __typename?: 'EventSettings';\n  commands: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  event: Scalars['String'];\n  id: Scalars['String'];\n  mtime: Scalars['Long'];\n  trigger: Scalars['String'];\n};\n\nexport type FileSystemSettings = {\n  __typename?: 'FileSystemSettings';\n  mountPoints: Array<MountPointSettings>;\n  programDirectory: Scalars['String'];\n};\n\nexport type MachineAxisSettings = {\n  __typename?: 'MachineAxisSettings';\n  accuracy: Scalars['Decimal'];\n  id: Maybe<Scalars['String']>;\n  max: Scalars['Decimal'];\n  min: Scalars['Decimal'];\n  name: AxisName;\n  precision: Scalars['Decimal'];\n};\n\nexport type MachineCommandSettings = {\n  __typename?: 'MachineCommandSettings';\n  id: Scalars['String'];\n  name: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type MachineFeatureSettings = {\n  __typename?: 'MachineFeatureSettings';\n  description: Maybe<Scalars['String']>;\n  disabled: Scalars['Boolean'];\n  icon: Maybe<Scalars['String']>;\n  id: Maybe<Scalars['String']>;\n  key: Scalars['String'];\n  title: Maybe<Scalars['String']>;\n};\n\nexport type MachineFirmwareSettings = {\n  __typename?: 'MachineFirmwareSettings';\n  baudRate: BaudRate;\n  controllerType: MachineControllerType;\n  downloadUrl: Maybe<Scalars['String']>;\n  edition: Maybe<Scalars['String']>;\n  helpUrl: Maybe<Scalars['String']>;\n  id: Maybe<Scalars['String']>;\n  name: Maybe<Scalars['String']>;\n  requiredVersion: Scalars['Decimal'];\n  rtscts: Scalars['Boolean'];\n  suggestedVersion: Scalars['Decimal'];\n};\n\nexport type MachinePartSettings = {\n  __typename?: 'MachinePartSettings';\n  dataBlob: Maybe<Scalars['String']>;\n  description: Maybe<Scalars['String']>;\n  id: Maybe<Scalars['String']>;\n  isDefault: Scalars['Boolean'];\n  optional: Scalars['Boolean'];\n  partType: MachinePartType;\n  settings: Array<MachineSettingSettings>;\n  specs: Array<MachineSpecSettings>;\n  title: Scalars['String'];\n};\n\nexport type MachineSettingSettings = {\n  __typename?: 'MachineSettingSettings';\n  id: Scalars['String'];\n  key: Scalars['String'];\n  settingType: MachineSettingType;\n  title: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type MachineSpecSettings = {\n  __typename?: 'MachineSpecSettings';\n  id: Scalars['String'];\n  specType: MachineSpecType;\n  value: Scalars['Decimal'];\n};\n\nexport type MacroSettings = {\n  __typename?: 'MacroSettings';\n  content: Scalars['String'];\n  id: Scalars['String'];\n  mtime: Scalars['Long'];\n  name: Scalars['String'];\n};\n\nexport type MakerverseSettings = {\n  __typename?: 'MakerverseSettings';\n  appUpdates: AppUpdates;\n  commands: Array<CommandSettings>;\n  events: Array<EventSettings>;\n  fileSystem: FileSystemSettings;\n  macros: Array<MacroSettings>;\n  users: Array<MakerverseUser>;\n  workspaces: Array<WorkspaceSettings>;\n};\n\nexport type MakerverseUser = {\n  __typename?: 'MakerverseUser';\n  authenticationType: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id: Maybe<Scalars['String']>;\n  tokens: Array<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type MountPointSettings = {\n  __typename?: 'MountPointSettings';\n  route: Scalars['String'];\n  target: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  authenticate: MakerverseUser;\n  settings: Maybe<MakerverseSettings>;\n};\n\n\nexport type QueryAuthenticateArgs = {\n  token: Scalars['String'];\n};\n\nexport type WorkspaceSettings = {\n  __typename?: 'WorkspaceSettings';\n  autoReconnect: Scalars['Boolean'];\n  axes: Array<MachineAxisSettings>;\n  color: Maybe<Scalars['String']>;\n  commands: Array<MachineCommandSettings>;\n  connection: ConnectionSettings;\n  features: Array<MachineFeatureSettings>;\n  icon: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  machineProfileId: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  onboarded: Scalars['Boolean'];\n  parts: Array<MachinePartSettings>;\n  path: Scalars['String'];\n  preferImperial: Scalars['Boolean'];\n};\n\nexport enum AxisName {\n  X = 'X',\n  Y = 'Y',\n  Z = 'Z'\n}\n\nexport enum BaudRate {\n  Br115200 = 'BR115200',\n  Br19200 = 'BR19200',\n  Br2400 = 'BR2400',\n  Br250000 = 'BR250000',\n  Br38400 = 'BR38400',\n  Br57600 = 'BR57600',\n  Br9600 = 'BR9600'\n}\n\nexport enum MachineControllerType {\n  Grbl = 'GRBL',\n  Marlin = 'MARLIN',\n  Maslow = 'MASLOW',\n  Smoothie = 'SMOOTHIE',\n  TinyG = 'TINY_G'\n}\n\nexport enum MachinePartType {\n  AxisMotor = 'AXIS_MOTOR',\n  Board = 'BOARD',\n  EmergencyStop = 'EMERGENCY_STOP',\n  Heatbed = 'HEATBED',\n  Hotend = 'HOTEND',\n  LimitSwitches = 'LIMIT_SWITCHES',\n  Mmu = 'MMU',\n  Nozzle = 'NOZZLE',\n  Psu = 'PSU',\n  Shield = 'SHIELD',\n  Sled = 'SLED',\n  Spindle = 'SPINDLE',\n  Unknown = 'UNKNOWN'\n}\n\nexport enum MachineSettingType {\n  Grbl = 'GRBL',\n  Kv = 'KV'\n}\n\nexport enum MachineSpecType {\n  MaxAmps = 'MAX_AMPS',\n  MaxLayerHeight = 'MAX_LAYER_HEIGHT',\n  MaxRpm = 'MAX_RPM',\n  MaxTemp = 'MAX_TEMP',\n  MaxTravelSpeed = 'MAX_TRAVEL_SPEED',\n  MaxVolts = 'MAX_VOLTS',\n  MaxWatts = 'MAX_WATTS',\n  MinLayerHeight = 'MIN_LAYER_HEIGHT',\n  NumberOfMaterials = 'NUMBER_OF_MATERIALS',\n  TipSize = 'TIP_SIZE',\n  Watts = 'WATTS',\n  WaveLength = 'WAVE_LENGTH'\n}\n\n\n\n\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n  AppUpdates: ResolverTypeWrapper<AppUpdates>;\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\n  CommandSettings: ResolverTypeWrapper<CommandSettings>;\n  String: ResolverTypeWrapper<Scalars['String']>;\n  ConnectionSettings: ResolverTypeWrapper<ConnectionSettings>;\n  EventSettings: ResolverTypeWrapper<EventSettings>;\n  FileSystemSettings: ResolverTypeWrapper<FileSystemSettings>;\n  MachineAxisSettings: ResolverTypeWrapper<MachineAxisSettings>;\n  MachineCommandSettings: ResolverTypeWrapper<MachineCommandSettings>;\n  MachineFeatureSettings: ResolverTypeWrapper<MachineFeatureSettings>;\n  MachineFirmwareSettings: ResolverTypeWrapper<MachineFirmwareSettings>;\n  MachinePartSettings: ResolverTypeWrapper<MachinePartSettings>;\n  MachineSettingSettings: ResolverTypeWrapper<MachineSettingSettings>;\n  MachineSpecSettings: ResolverTypeWrapper<MachineSpecSettings>;\n  MacroSettings: ResolverTypeWrapper<MacroSettings>;\n  MakerverseSettings: ResolverTypeWrapper<MakerverseSettings>;\n  MakerverseUser: ResolverTypeWrapper<MakerverseUser>;\n  MountPointSettings: ResolverTypeWrapper<MountPointSettings>;\n  Query: ResolverTypeWrapper<{}>;\n  WorkspaceSettings: ResolverTypeWrapper<WorkspaceSettings>;\n  AxisName: AxisName;\n  BaudRate: BaudRate;\n  MachineControllerType: MachineControllerType;\n  MachinePartType: MachinePartType;\n  MachineSettingType: MachineSettingType;\n  MachineSpecType: MachineSpecType;\n  Long: ResolverTypeWrapper<Scalars['Long']>;\n  Decimal: ResolverTypeWrapper<Scalars['Decimal']>;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n  AppUpdates: AppUpdates;\n  Boolean: Scalars['Boolean'];\n  CommandSettings: CommandSettings;\n  String: Scalars['String'];\n  ConnectionSettings: ConnectionSettings;\n  EventSettings: EventSettings;\n  FileSystemSettings: FileSystemSettings;\n  MachineAxisSettings: MachineAxisSettings;\n  MachineCommandSettings: MachineCommandSettings;\n  MachineFeatureSettings: MachineFeatureSettings;\n  MachineFirmwareSettings: MachineFirmwareSettings;\n  MachinePartSettings: MachinePartSettings;\n  MachineSettingSettings: MachineSettingSettings;\n  MachineSpecSettings: MachineSpecSettings;\n  MacroSettings: MacroSettings;\n  MakerverseSettings: MakerverseSettings;\n  MakerverseUser: MakerverseUser;\n  MountPointSettings: MountPointSettings;\n  Query: {};\n  WorkspaceSettings: WorkspaceSettings;\n  Long: Scalars['Long'];\n  Decimal: Scalars['Decimal'];\n};\n\nexport type AppUpdatesResolvers<ContextType = any, ParentType extends ResolversParentTypes['AppUpdates'] = ResolversParentTypes['AppUpdates']> = {\n  checkForUpdates: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  prereleases: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type CommandSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommandSettings'] = ResolversParentTypes['CommandSettings']> = {\n  commands: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  enabled: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  mtime: Resolver<ResolversTypes['Long'], ParentType, ContextType>;\n  title: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type ConnectionSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConnectionSettings'] = ResolversParentTypes['ConnectionSettings']> = {\n  firmware: Resolver<ResolversTypes['MachineFirmwareSettings'], ParentType, ContextType>;\n  manufacturer: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  port: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type EventSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['EventSettings'] = ResolversParentTypes['EventSettings']> = {\n  commands: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  enabled: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  event: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  mtime: Resolver<ResolversTypes['Long'], ParentType, ContextType>;\n  trigger: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type FileSystemSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['FileSystemSettings'] = ResolversParentTypes['FileSystemSettings']> = {\n  mountPoints: Resolver<Array<ResolversTypes['MountPointSettings']>, ParentType, ContextType>;\n  programDirectory: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineAxisSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineAxisSettings'] = ResolversParentTypes['MachineAxisSettings']> = {\n  accuracy: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  id: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  max: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  min: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  name: Resolver<ResolversTypes['AxisName'], ParentType, ContextType>;\n  precision: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineCommandSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineCommandSettings'] = ResolversParentTypes['MachineCommandSettings']> = {\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  name: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  value: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineFeatureSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineFeatureSettings'] = ResolversParentTypes['MachineFeatureSettings']> = {\n  description: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  disabled: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  icon: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  key: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  title: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineFirmwareSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineFirmwareSettings'] = ResolversParentTypes['MachineFirmwareSettings']> = {\n  baudRate: Resolver<ResolversTypes['BaudRate'], ParentType, ContextType>;\n  controllerType: Resolver<ResolversTypes['MachineControllerType'], ParentType, ContextType>;\n  downloadUrl: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edition: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  helpUrl: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  name: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  requiredVersion: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  rtscts: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  suggestedVersion: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachinePartSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachinePartSettings'] = ResolversParentTypes['MachinePartSettings']> = {\n  dataBlob: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  description: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  isDefault: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  optional: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  partType: Resolver<ResolversTypes['MachinePartType'], ParentType, ContextType>;\n  settings: Resolver<Array<ResolversTypes['MachineSettingSettings']>, ParentType, ContextType>;\n  specs: Resolver<Array<ResolversTypes['MachineSpecSettings']>, ParentType, ContextType>;\n  title: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineSettingSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineSettingSettings'] = ResolversParentTypes['MachineSettingSettings']> = {\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  key: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  settingType: Resolver<ResolversTypes['MachineSettingType'], ParentType, ContextType>;\n  title: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  value: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MachineSpecSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MachineSpecSettings'] = ResolversParentTypes['MachineSpecSettings']> = {\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  specType: Resolver<ResolversTypes['MachineSpecType'], ParentType, ContextType>;\n  value: Resolver<ResolversTypes['Decimal'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MacroSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MacroSettings'] = ResolversParentTypes['MacroSettings']> = {\n  content: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  mtime: Resolver<ResolversTypes['Long'], ParentType, ContextType>;\n  name: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MakerverseSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MakerverseSettings'] = ResolversParentTypes['MakerverseSettings']> = {\n  appUpdates: Resolver<ResolversTypes['AppUpdates'], ParentType, ContextType>;\n  commands: Resolver<Array<ResolversTypes['CommandSettings']>, ParentType, ContextType>;\n  events: Resolver<Array<ResolversTypes['EventSettings']>, ParentType, ContextType>;\n  fileSystem: Resolver<ResolversTypes['FileSystemSettings'], ParentType, ContextType>;\n  macros: Resolver<Array<ResolversTypes['MacroSettings']>, ParentType, ContextType>;\n  users: Resolver<Array<ResolversTypes['MakerverseUser']>, ParentType, ContextType>;\n  workspaces: Resolver<Array<ResolversTypes['WorkspaceSettings']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MakerverseUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['MakerverseUser'] = ResolversParentTypes['MakerverseUser']> = {\n  authenticationType: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  enabled: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  id: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  tokens: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;\n  username: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MountPointSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MountPointSettings'] = ResolversParentTypes['MountPointSettings']> = {\n  route: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  target: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {\n  authenticate: Resolver<ResolversTypes['MakerverseUser'], ParentType, ContextType, RequireFields<QueryAuthenticateArgs, 'token'>>;\n  settings: Resolver<Maybe<ResolversTypes['MakerverseSettings']>, ParentType, ContextType>;\n};\n\nexport type WorkspaceSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['WorkspaceSettings'] = ResolversParentTypes['WorkspaceSettings']> = {\n  autoReconnect: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  axes: Resolver<Array<ResolversTypes['MachineAxisSettings']>, ParentType, ContextType>;\n  color: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  commands: Resolver<Array<ResolversTypes['MachineCommandSettings']>, ParentType, ContextType>;\n  connection: Resolver<ResolversTypes['ConnectionSettings'], ParentType, ContextType>;\n  features: Resolver<Array<ResolversTypes['MachineFeatureSettings']>, ParentType, ContextType>;\n  icon: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  machineProfileId: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  name: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  onboarded: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  parts: Resolver<Array<ResolversTypes['MachinePartSettings']>, ParentType, ContextType>;\n  path: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  preferImperial: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport interface LongScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Long'], any> {\n  name: 'Long';\n}\n\nexport interface DecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Decimal'], any> {\n  name: 'Decimal';\n}\n\nexport type Resolvers<ContextType = any> = {\n  AppUpdates: AppUpdatesResolvers<ContextType>;\n  CommandSettings: CommandSettingsResolvers<ContextType>;\n  ConnectionSettings: ConnectionSettingsResolvers<ContextType>;\n  EventSettings: EventSettingsResolvers<ContextType>;\n  FileSystemSettings: FileSystemSettingsResolvers<ContextType>;\n  MachineAxisSettings: MachineAxisSettingsResolvers<ContextType>;\n  MachineCommandSettings: MachineCommandSettingsResolvers<ContextType>;\n  MachineFeatureSettings: MachineFeatureSettingsResolvers<ContextType>;\n  MachineFirmwareSettings: MachineFirmwareSettingsResolvers<ContextType>;\n  MachinePartSettings: MachinePartSettingsResolvers<ContextType>;\n  MachineSettingSettings: MachineSettingSettingsResolvers<ContextType>;\n  MachineSpecSettings: MachineSpecSettingsResolvers<ContextType>;\n  MacroSettings: MacroSettingsResolvers<ContextType>;\n  MakerverseSettings: MakerverseSettingsResolvers<ContextType>;\n  MakerverseUser: MakerverseUserResolvers<ContextType>;\n  MountPointSettings: MountPointSettingsResolvers<ContextType>;\n  Query: QueryResolvers<ContextType>;\n  WorkspaceSettings: WorkspaceSettingsResolvers<ContextType>;\n  Long: GraphQLScalarType;\n  Decimal: GraphQLScalarType;\n};\n\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<ContextType = any> = Resolvers<ContextType>;\n\nexport type AuthenticateQueryVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type AuthenticateQuery = (\n  { __typename?: 'Query' }\n  & { authenticate: (\n    { __typename?: 'MakerverseUser' }\n    & MakerverseUserFullFragment\n  ) }\n);\n\nexport type MakerverseUserMinFragment = (\n  { __typename?: 'MakerverseUser' }\n  & Pick<MakerverseUser, 'username'>\n);\n\nexport type MakerverseUserFullFragment = (\n  { __typename?: 'MakerverseUser' }\n  & Pick<MakerverseUser, 'id' | 'authenticationType' | 'enabled' | 'tokens'>\n  & MakerverseUserMinFragment\n);\n\nexport type CommandFragment = (\n  { __typename?: 'CommandSettings' }\n  & Pick<CommandSettings, 'id' | 'mtime' | 'enabled' | 'title' | 'commands'>\n);\n\nexport type EventFragment = (\n  { __typename?: 'EventSettings' }\n  & Pick<EventSettings, 'id' | 'mtime' | 'enabled' | 'event' | 'trigger' | 'commands'>\n);\n\nexport type FileSystemFragment = (\n  { __typename?: 'FileSystemSettings' }\n  & Pick<FileSystemSettings, 'programDirectory'>\n  & { mountPoints: Array<(\n    { __typename?: 'MountPointSettings' }\n    & Pick<MountPointSettings, 'route' | 'target'>\n  )> }\n);\n\nexport type MakerverseSettingsStartupFragment = (\n  { __typename?: 'MakerverseSettings' }\n  & { fileSystem: (\n    { __typename?: 'FileSystemSettings' }\n    & FileSystemFragment\n  ), appUpdates: (\n    { __typename?: 'AppUpdates' }\n    & Pick<AppUpdates, 'checkForUpdates' | 'prereleases'>\n  ), commands: Array<(\n    { __typename?: 'CommandSettings' }\n    & CommandFragment\n  )>, events: Array<(\n    { __typename?: 'EventSettings' }\n    & EventFragment\n  )>, macros: Array<(\n    { __typename?: 'MacroSettings' }\n    & Pick<MacroSettings, 'id' | 'mtime' | 'name' | 'content'>\n  )>, users: Array<(\n    { __typename?: 'MakerverseUser' }\n    & MakerverseUserFullFragment\n  )> }\n);\n\nexport const FileSystemFragmentDoc = gql`\n    fragment FileSystem on FileSystemSettings {\n  programDirectory\n  mountPoints {\n    route\n    target\n  }\n}\n    `;\nexport const CommandFragmentDoc = gql`\n    fragment Command on CommandSettings {\n  id\n  mtime\n  enabled\n  title\n  commands\n}\n    `;\nexport const EventFragmentDoc = gql`\n    fragment Event on EventSettings {\n  id\n  mtime\n  enabled\n  event\n  trigger\n  commands\n}\n    `;\nexport const MakerverseUserMinFragmentDoc = gql`\n    fragment MakerverseUserMin on MakerverseUser {\n  username\n}\n    `;\nexport const MakerverseUserFullFragmentDoc = gql`\n    fragment MakerverseUserFull on MakerverseUser {\n  ...MakerverseUserMin\n  id\n  authenticationType\n  enabled\n  tokens\n}\n    ${MakerverseUserMinFragmentDoc}`;\nexport const MakerverseSettingsStartupFragmentDoc = gql`\n    fragment MakerverseSettingsStartup on MakerverseSettings {\n  fileSystem {\n    ...FileSystem\n  }\n  appUpdates {\n    checkForUpdates\n    prereleases\n  }\n  commands {\n    ...Command\n  }\n  events {\n    ...Event\n  }\n  macros {\n    id\n    mtime\n    name\n    content\n  }\n  users {\n    ...MakerverseUserFull\n  }\n}\n    ${FileSystemFragmentDoc}\n${CommandFragmentDoc}\n${EventFragmentDoc}\n${MakerverseUserFullFragmentDoc}`;\nexport const AuthenticateDocument = gql`\n    query Authenticate($token: String!) {\n  authenticate(token: $token) {\n    ...MakerverseUserFull\n  }\n}\n    ${MakerverseUserFullFragmentDoc}`;\n\n/**\n * __useAuthenticateQuery__\n *\n * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthenticateQuery({\n *   variables: {\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useAuthenticateQuery(baseOptions: Apollo.QueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n        return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n      }\nexport function useAuthenticateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthenticateQuery, AuthenticateQueryVariables>) {\n          return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(AuthenticateDocument, baseOptions);\n        }\nexport type AuthenticateQueryHookResult = ReturnType<typeof useAuthenticateQuery>;\nexport type AuthenticateLazyQueryHookResult = ReturnType<typeof useAuthenticateLazyQuery>;\nexport type AuthenticateQueryResult = Apollo.QueryResult<AuthenticateQuery, AuthenticateQueryVariables>;",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Login/Styles.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/store/redux.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/Styles.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/workspaces/workspace.ts",["241","242"],"import {Logger} from '@openworkshop/lib/utils/logging/Logger';\nimport _ from 'lodash';\nimport {\n  MachineControllerType,\n  MachinePartType,\n} from '@openworkshop/lib/api/graphql';\nimport { IOpenWorkShop } from '@openworkshop/lib';\nimport MachineController, {IWorkflow, MachineCommandType, MachineEventType} from '@openworkshop/open-controller/MachineController';\nimport api from 'api';\nimport events from 'events';\nimport store from 'store';\nimport {WORKFLOW_STATE_IDLE} from '../../constants';\nimport MachineSettings from '../MachineSettings';\nimport ActiveState, {IPos} from './active-state';\nimport Hardware from './hardware';\nimport {ControllerEventMap, WorkspaceRecord} from './types';\nimport WorkspaceAxis from './workspace-axis';\nimport { WorkspaceAxisMap} from './types';\nimport {\n  MachineConnectionFragment,\n  MachineFeatureFragment,\n  MachineFirmwareFragment,\n  MachineCommandFragment,\n  MachinePartFragment, MachineSettingsFragment,\n} from 'api/graphql';\n\nclass Workspace extends events.EventEmitter {\n  _record: WorkspaceRecord;\n\n  _isActive = false;\n\n  hardware: Hardware;\n\n  machineSettings: MachineSettings;\n\n  activeState: ActiveState;\n\n  _controller = new MachineController();\n\n  _metricJogSteps?: number[] = undefined;\n\n  _imperialJogSteps?: number[] = undefined;\n\n  _connecting = false;\n\n  _connected = false;\n\n  _controllerState: unknown = null;\n\n  _controllerSettings: unknown = null;\n\n  _ows: IOpenWorkShop;\n\n  _log?: Logger;\n\n  // record comes from an API response, loaded from .makerverse\n  constructor(ows:IOpenWorkShop , record: WorkspaceRecord) {\n    super();\n    this._ows = ows;\n    this._record = record;\n    this.addControllerEvents(this._controllerEvents);\n\n    const controllerType = this.firmware.controllerType;\n    this.hardware = new Hardware(this, controllerType);\n    this.machineSettings = new MachineSettings(this, controllerType);\n    this.activeState = new ActiveState(controllerType);\n  }\n\n  get log(): Logger {\n    if (!this._log) this._log = this._ows.logManager.getLogger(this.name);\n    return this._log;\n  }\n\n  // Convenience method which uses the slug (path without prefix slash)\n  get id(): string {\n    return this._record.id;\n  }\n\n  get path(): string {\n    return this._record.path;\n  }\n\n  get name(): string {\n    return this._record.name;\n  }\n\n  get connection(): MachineConnectionFragment {\n    return this._record.connection;\n  }\n\n  get firmware(): MachineFirmwareFragment {\n    return this.connection.firmware;\n  }\n\n  get hasOnboarding(): boolean {\n    return this.partSettings.length > 0 || this.firmware.controllerType === MachineControllerType.Maslow;\n  }\n\n  get hasOnboarded(): boolean {\n    return this._record.onboarded;\n  }\n\n  set hasOnboarded(val: boolean) {\n    if (this.hasOnboarded === val) {\n      return;\n    }\n    this.updateRecord({ ...this._record, onboarded: val });\n  }\n\n  // Flag set by main App.jsx to indicate if this is the active workspace.\n  get isActive(): boolean {\n    return this._isActive || false;\n  }\n\n  set isActive(active: boolean) {\n    const wasActive = this._isActive;\n    this._isActive = active;\n    if (wasActive !== this._isActive) {\n      if (this._isActive) {\n        this.onActivated();\n      } else {\n        this.onDeactivated();\n      }\n    }\n  }\n\n  get isImperialUnits(): boolean {\n    return this.isConnected && this.activeState.isImperialUnits;\n  }\n\n  onActivated(): void {\n    if (this._record.autoReconnect) {\n      void this.openPort();\n    }\n    this.hardware.onActivated();\n  }\n\n  onDeactivated(): void {\n    //\n  }\n\n  static getControllerTypeIconName(controllerType: MachineControllerType): string {\n    if (controllerType === MachineControllerType.Maslow) {\n      return 'maslow';\n    } else if (controllerType === MachineControllerType.Grbl) {\n      return 'cnc';\n    } else if (controllerType === MachineControllerType.Marlin) {\n      return '3dp';\n    }\n    return Workspace.defaultIcon;\n  }\n\n  static defaultColor = '#4078c0';\n\n  static defaultIcon = 'xyz';\n\n  static defaultBkColor = '#f6f7f8';\n\n  // Sidebar icon.\n  get icon(): string {\n    return this._record.icon || Workspace.getControllerTypeIconName(this.firmware.controllerType);\n  }\n\n  get hexColor(): string {\n    return this._record.color || Workspace.defaultColor;\n  }\n\n  get bkColor(): string {\n    return this._record.bkColor || Workspace.defaultBkColor;\n  }\n\n  updateRecord(values: WorkspaceRecord): void {\n    this._record = { ...this._record, ...values };\n    void api.workspaces.update(this.id, values);\n  }\n  // ---------------------------------------------------------------------------------------------\n  // PARTS\n  // ---------------------------------------------------------------------------------------------\n\n  get parts(): MachinePartFragment[] {\n    return this._record.parts || [];\n  }\n\n  findPart(partType: MachinePartType): MachinePartFragment | undefined {\n    const part = _.find(this.parts, { partType: partType });\n    return part ? { ...part } : undefined;\n  }\n\n  // All settings in parts\n  get partSettings(): MachineSettingsFragment[] {\n    let ret: MachineSettingsFragment[] = [];\n    this.parts.forEach((part) => {\n      ret = ret.concat(part.settings || []);\n    });\n\n    return ret;\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // AXES\n  // Each machine may have its own precision, accuracy, etc. for each axis.\n  // ---------------------------------------------------------------------------------------------\n\n  _axes: WorkspaceAxisMap = {};\n\n  get axes(): WorkspaceAxisMap {\n    return this.mapAxes();\n  }\n\n  // Iterate all axes; callback receives axis object.\n  // Return values from the callback (or else, the settings objects themselves) are mapped into\n  // the response, keyed by the same axisKey.\n  mapAxes(builder?: (v: WorkspaceAxis) => WorkspaceAxis): WorkspaceAxisMap {\n    const ret: WorkspaceAxisMap = {};\n    this._record.axes.forEach((axisRecord) => {\n      const axisKey = axisRecord.name;\n      if (!_.has(this._axes, axisRecord.name)) {\n        this._axes[axisKey] = new WorkspaceAxis(this, axisRecord);\n      }\n      if (builder) {\n        ret[axisKey] = builder(this._axes[axisKey]);\n      } else {\n        ret[axisKey] = this._axes[axisKey];\n      }\n    });\n    return ret;\n  }\n\n  // Find min & max units across all axes to create a single set of jog steps.\n  getJogSteps(imperialUnits?: boolean): number[] | undefined {\n    let axis: WorkspaceAxis | undefined = undefined;\n    const opts = { min: 9999, max: 0, imperialUnits: imperialUnits };\n    const div = imperialUnits ? 25.4 : 1;\n    const precision = imperialUnits ? 1 : 2;\n    const pow = Math.pow(10, precision);\n    Object.keys(this.axes).forEach((ak) => {\n      const a = this._axes[ak];\n      axis = !axis || a.precision > axis.precision ? a : axis;\n      opts.max = Math.max(opts.max, Math.round((a.range / 2 / div) * pow) / pow);\n      opts.min = Math.min(opts.min, Math.round((a.accuracy / div) * pow) / pow);\n    });\n    if (!axis) {\n      return undefined;\n    }\n    const a: WorkspaceAxis = axis;\n    return a.getJogSteps(opts);\n  }\n\n  get imperialJogSteps(): number[] | undefined {\n    if (!this._imperialJogSteps) {\n      this._imperialJogSteps = this.getJogSteps(true);\n    }\n    return this._imperialJogSteps;\n  }\n\n  get metricJogSteps(): number[] | undefined {\n    if (!this._metricJogSteps) {\n      this._metricJogSteps = this.getJogSteps(false);\n    }\n    return this._metricJogSteps;\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // wpos / mpos\n  // Transformations to ensure that they are returned in mm\n  // ---------------------------------------------------------------------------------------------\n\n  _reportedValueToMM(val: number, reportType = 'mpos'): number {\n    const ri = this.machineSettings.reportsImperial(this.activeState.isImperialUnits, reportType) as boolean;\n    return ri ? val * 25.4 : val;\n  }\n\n  get wpos(): IPos {\n    return _.mapValues(this.activeState.wpos, (val) => {\n      return this._reportedValueToMM(val, 'wpos');\n    });\n  }\n\n  get mpos(): IPos {\n    return _.mapValues(this.activeState.mpos, (val) => {\n      return this._reportedValueToMM(val, 'mpos');\n    });\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // FEATURES\n  // Allow for the API to enable/disable anything in this workspace.\n  // ---------------------------------------------------------------------------------------------\n\n  get features(): MachineFeatureFragment[] {\n    return this._record.features || [];\n  }\n\n  getFeature(key: string, defaults: MachineFeatureFragment): MachineFeatureFragment | undefined {\n    const f = this.features.find(f => f.key === key);\n    if (!f) {\n      // Disabled feature.\n      return undefined;\n    }\n    return { ...defaults, ...(typeof f !== 'object' ? {} : f) };\n  }\n\n  // ---------------------------------------------------------------------------------------------\n\n  _blockingText?: string = undefined;\n\n  // When the Workspace wants to display a message indicating that interaction is disabled.\n  get blockingText(): string | undefined {\n    return this._blockingText;\n  }\n\n  set blockingText(text: string | undefined) {\n    this._blockingText = text;\n    this.emit('block', text);\n  }\n\n  get workflow(): IWorkflow {\n    return this.controller.workflow;\n  }\n\n  get isReady(): boolean {\n    return this.activeState.isReady && this.workflow.state === WORKFLOW_STATE_IDLE;\n  }\n\n  async writeCommands(lines: MachineCommandType[], d = 2000): Promise<void> {\n    for (let i = 0; i < lines.length; i++) {\n      await this.controller.command(lines[i]);\n      await new Promise((r) => setTimeout(r, d));\n    }\n  }\n\n  async writeLines(lines: string[], delay = 2000) {\n    for (let i = 0; i < lines.length; i++) {\n      await this.controller.writeln(lines[i]);\n      await new Promise((r) => setTimeout(r, delay));\n    }\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // Workspaces own controllers, which each represent a single connection to the hardware.\n  // WIP: controller is still a global, but it gets (dis/re)connected when switching workspaces.\n  // ---------------------------------------------------------------------------------------------\n\n  get commands(): MachineCommandFragment[] {\n    return this._record.commands;\n  }\n\n  getCommand(name: string, def = []): string[] {\n    return [...(this.commands.find(c => c.name === name)?.value || def)];\n  }\n\n  _controllerEvents: ControllerEventMap = {\n    // 'serialport:change': (options) => {\n    //   const { port } = options;\n    //   if (port !== this.firmware.port) {\n    //     return;\n    //   }\n    //   log.debug(`Changed ports to \"${port}\"`);\n    // },\n    // 'serialport:open': (options) => {\n    //   const { port } = options;\n    //   if (port !== this.firmware.port || !this._connecting) {\n    //     return;\n    //   }\n    //\n    //   log.debug(`Established a connection to the serial port \"${port}\"`);\n    //   this._connecting = false;\n    //   this._connected = true;\n    //   analytics.event({\n    //     category: 'controller',\n    //     action: 'open',\n    //     label: this.firmware.controllerType,\n    //   });\n    // },\n    // 'serialport:close': (options) => {\n    //   const { port } = options;\n    //   if (port !== this.firmware.port) {\n    //     return;\n    //   }\n    //\n    //   log.debug(`The serial port \"${port}\" is disconected`);\n    //   this._connecting = false;\n    //   this._connected = false;\n    //   analytics.event({\n    //     category: 'controller',\n    //     action: 'close',\n    //     label: this.firmware.controllerType,\n    //   });\n    // },\n    // 'serialport:error': (options) => {\n    //   const { port } = options;\n    //   if (port !== this.firmware.port) {\n    //     return;\n    //   }\n    //\n    //   log.error(`Error opening serial port \"${port}\"`);\n    //   this._connecting = false;\n    //   this._connected = false;\n    //   analytics.exception({\n    //     description: 'error opening serial port',\n    //     fatal: false,\n    //   });\n    // },\n    // 'controller:state': (type, state) => {\n    //   // log.debug(type, 'state changed', state);\n    //   this.activeState.updateControllerState(state);\n    //   this._controllerState = state;\n    // },\n    // 'controller:settings': (type, settings) => {\n    //   // log.debug(type, 'settings changed', settings);\n    //   this.hardware.updateControllerSettings(settings);\n    //   this.machineSettings.update(settings);\n    //   this._controllerSettings = settings;\n    // }\n  };\n\n  get controller(): MachineController {\n    return this._controller;\n  }\n\n  get controllerState(): unknown {\n    return this._controllerState;\n  }\n\n  get controllerSettings(): unknown {\n    return this._controllerSettings;\n  }\n\n  get isConnected(): boolean {\n    return this._connected;\n  }\n\n  get isConnecting(): boolean {\n    return this._connecting;\n  }\n\n  async reOpenPort(): Promise<boolean> {\n    await this.closePort();\n    return await this.openPort();\n  }\n\n  async openPort(): Promise<boolean> {\n    if (this._connected) {\n      return true;\n    }\n    const connection = this.connection;\n    this._connecting = true;\n    this._connected = false;\n    this.log.debug('Open port with firmware', connection);\n    try {\n      await this.controller.openPort(connection);\n      return true;\n    } catch (e) {\n      this._connecting = false;\n      this._connected = false;\n      this.log.error(e);\n    }\n    return false;\n  }\n\n  async closePort(): Promise<void> {\n    if (!this._connecting && !this._connected) {\n      return;\n    }\n    this._connecting = false;\n    this._connected = false;\n    try {\n      await this.controller.closePort(this.connection.port);\n    } catch (e) {\n      this.log.error(e);\n    }\n  }\n\n  addControllerEvents(controllerEvents: ControllerEventMap): void {\n    Object.keys(controllerEvents).forEach((eventName) => {\n      const callback = controllerEvents[eventName];\n      this.controller.addListener(eventName as MachineEventType, callback);\n    });\n  }\n\n  removeControllerEvents(controllerEvents: ControllerEventMap): void {\n    Object.keys(controllerEvents).forEach((eventName) => {\n      const callback = controllerEvents[eventName];\n      this.controller.removeListener(eventName as MachineEventType, callback);\n    });\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  get centerWidgets(): string[] {\n    const defaults = ['visualizer'];\n    return this.get('container.center.widgets', defaults);\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  get primaryWidgets(): string[] {\n    const controllerWidget: string = this.firmware.controllerType.toLowerCase();\n    return ['connection', 'console', controllerWidget];\n  }\n\n  get primaryWidgetsVisible(): boolean {\n    return this.get('container.primary.visible', true);\n  }\n\n  set primaryWidgetsVisible(val: boolean) {\n    this.set('container.primary.visible', !!val);\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  get secondaryWidgets(): string[] {\n    const defaults = ['axes', 'gcode', 'macro', 'probe', 'spindle', 'laser', 'webcam'];\n    return this.get('container.secondary.widgets', defaults);\n  }\n\n  set secondaryWidgets(arr: string[]) {\n    this.set('container.secondary.widgets', arr);\n  }\n\n  get secondaryWidgetsVisible(): boolean {\n    return this.get('container.secondary.visible', true);\n  }\n\n  set secondaryWidgetsVisible(val: boolean) {\n    this.set('container.secondary.visible', val);\n  }\n\n  // ---------------------------------------------------------------------------------------------\n\n  get activeWidgetTypes(): string[] {\n    const centerWidgets = this.centerWidgets.map((widgetId) => widgetId.split(':')[0]);\n    const primaryWidgets = this.primaryWidgets.map((widgetId) => widgetId.split(':')[0]);\n    const secondaryWidgets = this.secondaryWidgets.map((widgetId) => widgetId.split(':')[0]);\n    return _.union(centerWidgets, primaryWidgets, secondaryWidgets);\n  }\n\n  get inactiveWidgetTypes(): string[] {\n    const allWidgets: string[] = []; // Object.keys(defaultState.widgets);\n    const centerWidgets = this.centerWidgets.map((widgetId) => widgetId.split(':')[0]);\n    const primaryWidgets = this.primaryWidgets.map((widgetId) => widgetId.split(':')[0]);\n    const secondaryWidgets = this.secondaryWidgets.map((widgetId) => widgetId.split(':')[0]);\n    return _.difference(allWidgets, centerWidgets, primaryWidgets, secondaryWidgets);\n  }\n\n  // A workspace uses local storage to keep user-level customizations.\n  get<T>(settingKey: string, def: T): T {\n    return store.get(`workspace.${this.id}.${settingKey}`, def) as T;\n  }\n\n  set<T>(settingKey: string, value: T) {\n    // Calling store.set() will merge two different arrays into one.\n    // Remove the property first to avoid duplication.\n    return store.replace(`workspace.${this.id}.${settingKey}`, value);\n  }\n}\n\nexport default Workspace;\n","/Users/zaneclaes/OWS/Makerverse/App/src/views/WorkspaceCreator/Styles.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/semvers.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/HeaderBar.tsx",["243","244"],"import { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport useLogger from '@openworkshop/lib/utils/logging/UseLogger';\nimport React, { FunctionComponent } from 'react';\nimport settings from '../../config/settings';\nimport { MakerverseContext } from '../../lib/Makerverse';\nimport useStyles from './Styles';\nimport UserMenu from './UserMenu';\n\ninterface OwnProps {\n  toggleDrawerOpen: () => void;\n}\n\ntype Props = OwnProps;\n\nconst HeaderBar: FunctionComponent<Props> = (props) => {\n  const log = useLogger(HeaderBar);\n  const makerverse = React.useContext(MakerverseContext);\n  // const workspace = makerverse.workspaces.current;\n  const classes = useStyles();\n\n  // const bk = workspace ? { backgroundColor: workspace.hexColor } : {};\n  // log.debug('workspace', workspace, bk);\n\n  return (\n    <AppBar position='fixed' className={classes.appBar}>\n      <Toolbar className={classes.toolbar} >\n        <IconButton\n          aria-label='open drawer'\n          edge='start'\n          onClick={() => props.toggleDrawerOpen()}\n          className={classes.menuButton}\n        >\n          <img\n            src=\"/images/logos/makerverse.png\"\n            className={classes.sidebarIcon}\n          />\n        </IconButton>\n        <Typography variant='h1' noWrap className={classes.headerTitle}>\n          {settings.productName}\n        </Typography>\n        <UserMenu />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default HeaderBar;\n","/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ListMenuItem.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/NotFound.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/SideDrawer.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/analytics.ts",["245","246","247","248"],"/Users/zaneclaes/OWS/Makerverse/App/src/views/Workspace/index.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/components/Navigation/ProtectedRoute.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/Workspaces.ts",["249","250","251"],"import { IOpenWorkShop } from '@openworkshop/lib';\nimport {Logger} from '@openworkshop/lib/utils/logging/Logger';\nimport _ from 'lodash';\nimport Workspace from 'lib/workspaces/workspace';\nimport {WorkspaceRecord} from '../workspaces/types';\nimport {IMakerverse} from './MakerverseContext';\n\nexport type WorkspaceMap = { [key: string]: Workspace };\n\nexport default class Workspaces {\n  _makerverse: IMakerverse;\n\n  _currentWorkspace?: Workspace = undefined;\n\n  _all: WorkspaceMap = {};\n\n  _log?: Logger = undefined;\n\n  constructor(makerverse: IMakerverse) {\n    this._makerverse = makerverse;\n  }\n  //\n  // get all(): WorkspaceMap {\n  //   return this._all;\n  // }\n  //\n  // get current(): Workspace | undefined {\n  //   return this._currentWorkspace;\n  // }\n  //\n  // set current(ws: Workspace | undefined) {\n  //   this.log.debug('setting workspace to', ws?.id);\n  //   if (this.current) {\n  //     if (ws && ws.id === this.current.id) {\n  //       return;\n  //     }\n  //     this.current.isActive = false;\n  //   }\n  //   this._currentWorkspace = ws;\n  //   if (this.current) {\n  //     this.current.isActive = true;\n  //   }\n  // }\n  //\n  // findByPath(path: string): Workspace | undefined {\n  //   if (path.startsWith('/workspaces')) {\n  //     path = path.substring('/workspaces'.length);\n  //   }\n  //   return _.find(this.all, (w) => {\n  //     return w.path === path;\n  //   });\n  // }\n  // //\n  // // load(mv: IMakerverse, record: WorkspaceRecord): Workspace | undefined {\n  // //   const id: string = record.id;\n  // //   if (_.has(this.all, id)) {\n  // //     this.all[id]._record = {\n  // //       ...this.all[id]._record,\n  // //       ...record,\n  // //     };\n  // //   } else {\n  // //     this.all[id] = new Workspace(mv, record);\n  // //   }\n  // //   return this.all[id];\n  // // }\n  //\n  // async unload(id: string): Promise<void> {\n  //   if (!_.has(this.all, id)) {\n  //     return;\n  //   }\n  //   const workspace = this.all[id];\n  //   workspace.removeControllerEvents(workspace._controllerEvents);\n  //   await workspace.closePort();\n  //   delete this.all[id];\n  // }\n  //\n  // disconnect(): void {\n  //   Object.keys(this.all).map((id) => {\n  //     const workspace: Workspace = this.all[id];\n  //     void workspace.controller.disconnect();\n  //   });\n  // }\n}\n","/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/Hooks.ts",["252","253","254"],"import React from 'react';\nimport {MakerverseContext} from './MakerverseContext';\nimport Workspaces from './Workspaces';\n\n// export function useWorkspaces(): Workspaces {\n//   return React.useContext(MakerverseContext).workspaces;\n// }\n","/Users/zaneclaes/OWS/Makerverse/App/src/views/App.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/MakerverseProvider.tsx",["255","256"],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/suspend.ts",[],[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/Home/index.tsx",["257"],"/Users/zaneclaes/OWS/Makerverse/App/src/views/Settings/index.tsx",[],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/types.ts",[],"/Users/zaneclaes/OWS/Makerverse/App/src/views/ProtectedApp.tsx",["258","259","260","261","262"],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/apollo.ts",["263"],"/Users/zaneclaes/OWS/Makerverse/App/src/lib/Makerverse/reducers.ts",[],{"ruleId":"264","severity":1,"message":"265","line":9,"column":16,"nodeType":"266","messageId":"267","endLine":9,"endColumn":24},{"ruleId":"264","severity":1,"message":"268","line":22,"column":49,"nodeType":"266","messageId":"267","endLine":22,"endColumn":54},{"ruleId":"264","severity":1,"message":"269","line":30,"column":9,"nodeType":"266","messageId":"267","endLine":30,"endColumn":18},{"ruleId":"264","severity":1,"message":"270","line":52,"column":12,"nodeType":"266","messageId":"267","endLine":52,"endColumn":23},{"ruleId":"264","severity":1,"message":"271","line":3,"column":3,"nodeType":"266","messageId":"267","endLine":3,"endColumn":7},{"ruleId":"264","severity":1,"message":"272","line":4,"column":3,"nodeType":"266","messageId":"267","endLine":4,"endColumn":14},{"ruleId":"264","severity":1,"message":"273","line":5,"column":3,"nodeType":"266","messageId":"267","endLine":5,"endColumn":14},{"ruleId":"264","severity":1,"message":"274","line":6,"column":3,"nodeType":"266","messageId":"267","endLine":6,"endColumn":13},{"ruleId":"264","severity":1,"message":"275","line":10,"column":3,"nodeType":"266","messageId":"267","endLine":10,"endColumn":10},{"ruleId":"264","severity":1,"message":"276","line":16,"column":8,"nodeType":"266","messageId":"267","endLine":16,"endColumn":18},{"ruleId":"264","severity":1,"message":"277","line":26,"column":10,"nodeType":"266","messageId":"267","endLine":26,"endColumn":20},{"ruleId":"264","severity":1,"message":"278","line":26,"column":22,"nodeType":"266","messageId":"267","endLine":26,"endColumn":33},{"ruleId":"264","severity":1,"message":"268","line":34,"column":46,"nodeType":"266","messageId":"267","endLine":34,"endColumn":51},{"ruleId":"264","severity":1,"message":"279","line":39,"column":17,"nodeType":"266","messageId":"267","endLine":39,"endColumn":25},{"ruleId":"264","severity":1,"message":"268","line":30,"column":45,"nodeType":"266","messageId":"267","endLine":30,"endColumn":50},{"ruleId":"264","severity":1,"message":"280","line":31,"column":9,"nodeType":"266","messageId":"267","endLine":31,"endColumn":12},{"ruleId":"264","severity":1,"message":"281","line":13,"column":10,"nodeType":"266","messageId":"267","endLine":13,"endColumn":17},{"ruleId":"282","severity":1,"message":"283","line":15,"column":9,"nodeType":"284","messageId":"285","endLine":15,"endColumn":12,"suggestions":"286"},{"ruleId":"282","severity":1,"message":"283","line":17,"column":12,"nodeType":"284","messageId":"285","endLine":17,"endColumn":15,"suggestions":"287"},{"ruleId":"288","severity":2,"message":"289","line":268,"column":41,"nodeType":"290","messageId":"291","endLine":268,"endColumn":43},{"ruleId":"288","severity":2,"message":"289","line":268,"column":56,"nodeType":"290","messageId":"291","endLine":268,"endColumn":58},{"ruleId":"288","severity":2,"message":"289","line":268,"column":68,"nodeType":"290","messageId":"291","endLine":268,"endColumn":70},{"ruleId":"282","severity":1,"message":"283","line":299,"column":38,"nodeType":"284","messageId":"285","endLine":299,"endColumn":41,"suggestions":"292"},{"ruleId":"282","severity":1,"message":"283","line":300,"column":43,"nodeType":"284","messageId":"285","endLine":300,"endColumn":46,"suggestions":"293"},{"ruleId":"288","severity":2,"message":"289","line":307,"column":74,"nodeType":"290","messageId":"291","endLine":307,"endColumn":76},{"ruleId":"288","severity":2,"message":"289","line":307,"column":89,"nodeType":"290","messageId":"291","endLine":307,"endColumn":91},{"ruleId":"288","severity":2,"message":"289","line":307,"column":101,"nodeType":"290","messageId":"291","endLine":307,"endColumn":103},{"ruleId":"282","severity":1,"message":"283","line":308,"column":16,"nodeType":"284","messageId":"285","endLine":308,"endColumn":19,"suggestions":"294"},{"ruleId":"288","severity":2,"message":"289","line":311,"column":45,"nodeType":"290","messageId":"291","endLine":311,"endColumn":47},{"ruleId":"288","severity":2,"message":"289","line":311,"column":60,"nodeType":"290","messageId":"291","endLine":311,"endColumn":62},{"ruleId":"288","severity":2,"message":"289","line":317,"column":36,"nodeType":"290","messageId":"291","endLine":317,"endColumn":38},{"ruleId":"288","severity":2,"message":"289","line":317,"column":51,"nodeType":"290","messageId":"291","endLine":317,"endColumn":53},{"ruleId":"288","severity":2,"message":"289","line":321,"column":43,"nodeType":"290","messageId":"291","endLine":321,"endColumn":45},{"ruleId":"288","severity":2,"message":"289","line":321,"column":57,"nodeType":"290","messageId":"291","endLine":321,"endColumn":59},{"ruleId":"288","severity":2,"message":"289","line":321,"column":72,"nodeType":"290","messageId":"291","endLine":321,"endColumn":74},{"ruleId":"288","severity":2,"message":"289","line":321,"column":84,"nodeType":"290","messageId":"291","endLine":321,"endColumn":86},{"ruleId":"288","severity":2,"message":"289","line":349,"column":30,"nodeType":"290","messageId":"291","endLine":349,"endColumn":32},{"ruleId":"288","severity":2,"message":"289","line":381,"column":10,"nodeType":"290","messageId":"291","endLine":381,"endColumn":12},{"ruleId":"282","severity":1,"message":"283","line":387,"column":47,"nodeType":"284","messageId":"285","endLine":387,"endColumn":50,"suggestions":"295"},{"ruleId":"282","severity":1,"message":"283","line":393,"column":52,"nodeType":"284","messageId":"285","endLine":393,"endColumn":55,"suggestions":"296"},{"ruleId":"282","severity":1,"message":"283","line":402,"column":55,"nodeType":"284","messageId":"285","endLine":402,"endColumn":58,"suggestions":"297"},{"ruleId":"282","severity":1,"message":"283","line":409,"column":50,"nodeType":"284","messageId":"285","endLine":409,"endColumn":53,"suggestions":"298"},{"ruleId":"282","severity":1,"message":"283","line":419,"column":55,"nodeType":"284","messageId":"285","endLine":419,"endColumn":58,"suggestions":"299"},{"ruleId":"282","severity":1,"message":"283","line":425,"column":56,"nodeType":"284","messageId":"285","endLine":425,"endColumn":59,"suggestions":"300"},{"ruleId":"282","severity":1,"message":"283","line":435,"column":59,"nodeType":"284","messageId":"285","endLine":435,"endColumn":62,"suggestions":"301"},{"ruleId":"282","severity":1,"message":"283","line":442,"column":59,"nodeType":"284","messageId":"285","endLine":442,"endColumn":62,"suggestions":"302"},{"ruleId":"282","severity":1,"message":"283","line":452,"column":60,"nodeType":"284","messageId":"285","endLine":452,"endColumn":63,"suggestions":"303"},{"ruleId":"282","severity":1,"message":"283","line":466,"column":56,"nodeType":"284","messageId":"285","endLine":466,"endColumn":59,"suggestions":"304"},{"ruleId":"282","severity":1,"message":"283","line":479,"column":59,"nodeType":"284","messageId":"285","endLine":479,"endColumn":62,"suggestions":"305"},{"ruleId":"282","severity":1,"message":"283","line":488,"column":56,"nodeType":"284","messageId":"285","endLine":488,"endColumn":59,"suggestions":"306"},{"ruleId":"282","severity":1,"message":"283","line":495,"column":50,"nodeType":"284","messageId":"285","endLine":495,"endColumn":53,"suggestions":"307"},{"ruleId":"282","severity":1,"message":"283","line":503,"column":55,"nodeType":"284","messageId":"285","endLine":503,"endColumn":58,"suggestions":"308"},{"ruleId":"282","severity":1,"message":"283","line":514,"column":51,"nodeType":"284","messageId":"285","endLine":514,"endColumn":54,"suggestions":"309"},{"ruleId":"282","severity":1,"message":"283","line":523,"column":55,"nodeType":"284","messageId":"285","endLine":523,"endColumn":58,"suggestions":"310"},{"ruleId":"282","severity":1,"message":"283","line":529,"column":42,"nodeType":"284","messageId":"285","endLine":529,"endColumn":45,"suggestions":"311"},{"ruleId":"282","severity":1,"message":"283","line":534,"column":54,"nodeType":"284","messageId":"285","endLine":534,"endColumn":57,"suggestions":"312"},{"ruleId":"282","severity":1,"message":"283","line":552,"column":91,"nodeType":"284","messageId":"285","endLine":552,"endColumn":94,"suggestions":"313"},{"ruleId":"282","severity":1,"message":"283","line":556,"column":97,"nodeType":"284","messageId":"285","endLine":556,"endColumn":100,"suggestions":"314"},{"ruleId":"282","severity":1,"message":"283","line":560,"column":37,"nodeType":"284","messageId":"285","endLine":560,"endColumn":40,"suggestions":"315"},{"ruleId":"282","severity":1,"message":"283","line":588,"column":38,"nodeType":"284","messageId":"285","endLine":588,"endColumn":41,"suggestions":"316"},{"ruleId":"317","severity":1,"message":"318","line":751,"column":8,"nodeType":"319","messageId":"320","endLine":751,"endColumn":122},{"ruleId":"321","severity":2,"message":"322","line":752,"column":1,"nodeType":"323","messageId":"324","endLine":752,"endColumn":9,"fix":"325"},{"ruleId":"321","severity":2,"message":"326","line":753,"column":1,"nodeType":"327","messageId":"324","endLine":753,"endColumn":7,"fix":"328"},{"ruleId":"317","severity":1,"message":"318","line":754,"column":8,"nodeType":"319","messageId":"320","endLine":754,"endColumn":131},{"ruleId":"321","severity":2,"message":"329","line":755,"column":1,"nodeType":"323","messageId":"324","endLine":755,"endColumn":11,"fix":"330"},{"ruleId":"321","severity":2,"message":"331","line":756,"column":1,"nodeType":"327","messageId":"324","endLine":756,"endColumn":9,"fix":"332"},{"ruleId":"317","severity":1,"message":"318","line":332,"column":3,"nodeType":"333","messageId":"320","endLine":332,"endColumn":50},{"ruleId":"317","severity":1,"message":"318","line":548,"column":3,"nodeType":"333","messageId":"320","endLine":548,"endColumn":39},{"ruleId":"264","severity":1,"message":"280","line":16,"column":9,"nodeType":"266","messageId":"267","endLine":16,"endColumn":12},{"ruleId":"264","severity":1,"message":"334","line":17,"column":9,"nodeType":"266","messageId":"267","endLine":17,"endColumn":19},{"ruleId":"264","severity":1,"message":"335","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":19},{"ruleId":"317","severity":1,"message":"318","line":43,"column":23,"nodeType":"336","messageId":"320","endLine":43,"endColumn":59},{"ruleId":"264","severity":1,"message":"337","line":54,"column":11,"nodeType":"266","messageId":"267","endLine":54,"endColumn":20},{"ruleId":"317","severity":1,"message":"318","line":67,"column":15,"nodeType":"336","messageId":"320","endLine":67,"endColumn":38},{"ruleId":"264","severity":1,"message":"338","line":1,"column":10,"nodeType":"266","messageId":"267","endLine":1,"endColumn":23},{"ruleId":"264","severity":1,"message":"339","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":9},{"ruleId":"264","severity":1,"message":"340","line":5,"column":9,"nodeType":"266","messageId":"267","endLine":5,"endColumn":24},{"ruleId":"264","severity":1,"message":"341","line":1,"column":8,"nodeType":"266","messageId":"267","endLine":1,"endColumn":13},{"ruleId":"264","severity":1,"message":"342","line":2,"column":9,"nodeType":"266","messageId":"267","endLine":2,"endColumn":26},{"ruleId":"264","severity":1,"message":"343","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":18},{"ruleId":"264","severity":1,"message":"344","line":4,"column":47,"nodeType":"266","messageId":"267","endLine":4,"endColumn":51},{"ruleId":"264","severity":1,"message":"345","line":46,"column":9,"nodeType":"266","messageId":"267","endLine":46,"endColumn":14},{"ruleId":"264","severity":1,"message":"346","line":6,"column":9,"nodeType":"266","messageId":"267","endLine":6,"endColumn":22},{"ruleId":"264","severity":1,"message":"347","line":2,"column":9,"nodeType":"266","messageId":"267","endLine":2,"endColumn":21},{"ruleId":"264","severity":1,"message":"348","line":8,"column":10,"nodeType":"266","messageId":"267","endLine":8,"endColumn":14},{"ruleId":"264","severity":1,"message":"349","line":11,"column":10,"nodeType":"266","messageId":"267","endLine":11,"endColumn":21},{"ruleId":"264","severity":1,"message":"265","line":12,"column":15,"nodeType":"266","messageId":"267","endLine":12,"endColumn":23},{"ruleId":"264","severity":1,"message":"350","line":18,"column":9,"nodeType":"266","messageId":"267","endLine":18,"endColumn":17},{"ruleId":"317","severity":1,"message":"318","line":80,"column":3,"nodeType":"333","messageId":"320","endLine":80,"endColumn":27},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'props' is defined but never used.","'isLoading' is assigned a value but never used.","'renderError' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardHeader' is defined but never used.","'Toolbar' is defined but never used.","'CardFooter' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'setGuest' is assigned a value but never used.","'log' is assigned a value but never used.","'machine' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["351","352"],["353","354"],"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","TSTypeLiteral","bannedTypeMessage",["355","356"],["357","358"],["359","360"],["361","362"],["363","364"],["365","366"],["367","368"],["369","370"],["371","372"],["373","374"],["375","376"],["377","378"],["379","380"],["381","382"],["383","384"],["385","386"],["387","388"],["389","390"],["391","392"],["393","394"],["395","396"],["397","398"],["399","400"],["401","402"],["403","404"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","indent","Expected indentation of 2 spaces but found 8.","Keyword","wrongIndentation",{"range":"405","text":"406"},"Expected indentation of 0 spaces but found 6.","Punctuator",{"range":"407","text":"408"},"Expected indentation of 2 spaces but found 10.",{"range":"409","text":"406"},"Expected indentation of 0 spaces but found 8.",{"range":"410","text":"408"},"FunctionExpression","'makerverse' is assigned a value but never used.","'Workspace' is defined but never used.","ArrowFunctionExpression","'ILocation' is defined but never used.","'IOpenWorkShop' is defined but never used.","'_' is defined but never used.","'WorkspaceRecord' is defined but never used.","'React' is defined but never used.","'MakerverseContext' is defined but never used.","'Workspaces' is defined but never used.","'Link' is defined but never used.","'token' is assigned a value but never used.","'hasWorkspaces' is assigned a value but never used.","'OpenWorkShop' is defined but never used.","'User' is defined but never used.","'useSelector' is defined but never used.","'AppState' is defined but never used.",{"messageId":"411","fix":"412","desc":"413"},{"messageId":"414","fix":"415","desc":"416"},{"messageId":"411","fix":"417","desc":"413"},{"messageId":"414","fix":"418","desc":"416"},{"messageId":"411","fix":"419","desc":"413"},{"messageId":"414","fix":"420","desc":"416"},{"messageId":"411","fix":"421","desc":"413"},{"messageId":"414","fix":"422","desc":"416"},{"messageId":"411","fix":"423","desc":"413"},{"messageId":"414","fix":"424","desc":"416"},{"messageId":"411","fix":"425","desc":"413"},{"messageId":"414","fix":"426","desc":"416"},{"messageId":"411","fix":"427","desc":"413"},{"messageId":"414","fix":"428","desc":"416"},{"messageId":"411","fix":"429","desc":"413"},{"messageId":"414","fix":"430","desc":"416"},{"messageId":"411","fix":"431","desc":"413"},{"messageId":"414","fix":"432","desc":"416"},{"messageId":"411","fix":"433","desc":"413"},{"messageId":"414","fix":"434","desc":"416"},{"messageId":"411","fix":"435","desc":"413"},{"messageId":"414","fix":"436","desc":"416"},{"messageId":"411","fix":"437","desc":"413"},{"messageId":"414","fix":"438","desc":"416"},{"messageId":"411","fix":"439","desc":"413"},{"messageId":"414","fix":"440","desc":"416"},{"messageId":"411","fix":"441","desc":"413"},{"messageId":"414","fix":"442","desc":"416"},{"messageId":"411","fix":"443","desc":"413"},{"messageId":"414","fix":"444","desc":"416"},{"messageId":"411","fix":"445","desc":"413"},{"messageId":"414","fix":"446","desc":"416"},{"messageId":"411","fix":"447","desc":"413"},{"messageId":"414","fix":"448","desc":"416"},{"messageId":"411","fix":"449","desc":"413"},{"messageId":"414","fix":"450","desc":"416"},{"messageId":"411","fix":"451","desc":"413"},{"messageId":"414","fix":"452","desc":"416"},{"messageId":"411","fix":"453","desc":"413"},{"messageId":"414","fix":"454","desc":"416"},{"messageId":"411","fix":"455","desc":"413"},{"messageId":"414","fix":"456","desc":"416"},{"messageId":"411","fix":"457","desc":"413"},{"messageId":"414","fix":"458","desc":"416"},{"messageId":"411","fix":"459","desc":"413"},{"messageId":"414","fix":"460","desc":"416"},{"messageId":"411","fix":"461","desc":"413"},{"messageId":"414","fix":"462","desc":"416"},{"messageId":"411","fix":"463","desc":"413"},{"messageId":"414","fix":"464","desc":"416"},{"messageId":"411","fix":"465","desc":"413"},{"messageId":"414","fix":"466","desc":"416"},{"messageId":"411","fix":"467","desc":"413"},{"messageId":"414","fix":"468","desc":"416"},[28989,28997],"  ",[29103,29109],"",[29244,29254],[29364,29372],"suggestUnknown",{"range":"469","text":"470"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"469","text":"471"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"472","text":"470"},{"range":"472","text":"471"},{"range":"473","text":"470"},{"range":"473","text":"471"},{"range":"474","text":"470"},{"range":"474","text":"471"},{"range":"475","text":"470"},{"range":"475","text":"471"},{"range":"476","text":"470"},{"range":"476","text":"471"},{"range":"477","text":"470"},{"range":"477","text":"471"},{"range":"478","text":"470"},{"range":"478","text":"471"},{"range":"479","text":"470"},{"range":"479","text":"471"},{"range":"480","text":"470"},{"range":"480","text":"471"},{"range":"481","text":"470"},{"range":"481","text":"471"},{"range":"482","text":"470"},{"range":"482","text":"471"},{"range":"483","text":"470"},{"range":"483","text":"471"},{"range":"484","text":"470"},{"range":"484","text":"471"},{"range":"485","text":"470"},{"range":"485","text":"471"},{"range":"486","text":"470"},{"range":"486","text":"471"},{"range":"487","text":"470"},{"range":"487","text":"471"},{"range":"488","text":"470"},{"range":"488","text":"471"},{"range":"489","text":"470"},{"range":"489","text":"471"},{"range":"490","text":"470"},{"range":"490","text":"471"},{"range":"491","text":"470"},{"range":"491","text":"471"},{"range":"492","text":"470"},{"range":"492","text":"471"},{"range":"493","text":"470"},{"range":"493","text":"471"},{"range":"494","text":"470"},{"range":"494","text":"471"},{"range":"495","text":"470"},{"range":"495","text":"471"},{"range":"496","text":"470"},{"range":"496","text":"471"},{"range":"497","text":"470"},{"range":"497","text":"471"},[748,751],"unknown","never",[809,812],[8170,8173],[8244,8247],[8622,8625],[11974,11977],[12348,12351],[12928,12931],[13401,13404],[14049,14052],[14461,14464],[15134,15137],[15587,15590],[16287,16290],[17328,17331],[18293,18296],[18900,18903],[19352,19355],[19853,19856],[20687,20690],[21295,21298],[21658,21661],[22030,22033],[23437,23440],[23559,23562],[23624,23627],[24979,24982]]