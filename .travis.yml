# branches:
#   # PRs are always built. So we exclude branch builds other than master to prevent double-builds.
#   # https://stackoverflow.com/questions/31882306/how-to-configure-travis-ci-to-build-pull-requests-merges-to-master-w-o-redunda
#   only:
#     - master

# Job queue; see below for default job settings.
jobs:
# [Job] [Docker] multi-ach: https://www.docker.com/blog/multi-arch-build-what-about-travis/
# - name: "Docker"
#   language: node_js
#   dist: bionic
#   sudo: required
#   os: linux
#   arch: amd64
#   # services:
#   #   - docker
#   before_install:
#     - npm install -g npm
#     # Install Docker 19.x, not 18
#     - curl -fsSL https://get.docker.com | sh
#     - echo '{"experimental":"enabled"}' | sudo tee /etc/docker/daemon.json
#     - mkdir -p $HOME/.docker
#     - echo '{"experimental":"enabled"}' | sudo tee $HOME/.docker/config.json
#     - sudo service docker start
#     - docker --version
#     # Install docker-buildx plugin for cross-architecture compilation.
#     - mkdir -p ~/.docker/cli-plugins/
#     - curl -fsSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
#     - chmod a+x ~/.docker/cli-plugins/docker-buildx
#     - docker context ls
#   install:
#     # With a multi-arch build, installing on the host machine first is faster.
#     - npm install
#     # Create a multi-arch buildx user: https://github.com/docker/buildx/issues/138
#     - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#     - docker buildx create --platform linux/arm64,linux/arm/v7 --name xbuilder --use
#     - docker buildx inspect --bootstrap
#   script:
#     - echo "Building $CI_SEMVER"
#     # Pre-build assets; this prevents the multi-arch from running each build in the Dockerfile.
#     - npm run build-latest
#     # Only the master branch supports a "deploy" step. For others, go ahead and push a dev image.
#     - scripts/docker.sh build
#   after_success: [] # Override.
#   addons:
#     apt:
#       packages:
#         - qemu-user-static # multi-arch build tools
#         - icnsutils
#         - graphicsmagick
#         - gcc-multilib
#         - g++-multilib
#         - rpm
#   deploy:
#     skip_cleanup: true # Leave build artifacts in place (don't git clean)
#     provider: script
#     script: scripts/docker.sh deploy
# # [Job] Raspberry Pi Image built with Docker
# - name: "Raspberry Pi OS Lite"
#   language: shell
#   sudo: required
#   os: linux
#   dist: bionic
#   install: []
#   services:
#     - docker
#   script:
#   - scripts/pack-rpi.sh lite
# # [Job] Raspberry Pi Image built with Docker
# - name: "Raspberry Pi OS Desktop"
#   language: shell
#   sudo: required
#   os: linux
#   dist: bionic
#   install: []
#   services:
#     - docker
#   script:
#   - scripts/pack-rpi.sh desktop
# # [Job] Linux (Electron App)
# - name: "Linux"
#   os: linux
#   script:
#   - npm run build-latest
#   - npm run build:linux-ia32
#   - npm run build:linux-x64
# [Job] MacOS (Electron App)
- name: "MacOS"
  os: osx
  osx_image: xcode12.2
  before_install:
  - scripts/add-osx-cert.sh
  script:
  - npm run build-latest
  - npm run build:mac-x64

# [Job] Windows (Electron App)
# - name: "Windows"
#   os: windows
#   script:
#   - npm run build-latest
#   - npm run build:win-x64

# --------------------------------------------------------------------------------------------------
# Default job settings, when not overwritten by specific jobs.
# --------------------------------------------------------------------------------------------------

dist: trusty
group: travis_latest
os: linux
language: node_js
node_js:
  - "12"

before_script:
- chmod -R +x scripts/
- echo "Building $CI_SEMVER (v. $CI_VERSION)"

env:
  global:
    - CI_VERSION=`git describe --tags --abbrev=0 | sed "s/^v//"` # 1.2.3 (or 1.2.4-preleease-name)
    - CI_SEMVER=`./scripts/semver.sh $CI_VERSION` # 1.2.3-prelease-name.build
    - TRAVIS_TAG=$CI_VERSION
    - PRODUCT_NAME=Makerverse
    - RELEASE_NAME="${PRODUCT_NAME} v${CI_VERSION}"
    - RELEASE_FILE="makerverse-${CI_SEMVER}"
    - LAST_COMMIT_DATE=`git log -1 --pretty=%cD`

cache:
  directories:
    - $HOME/.electron
    - packer_cache

install: npm install
addons:
  apt:
    packages:
      - icnsutils
      - graphicsmagick
      - gcc-multilib
      - g++-multilib
      - rpm

# By default, everything in the ./releases directory is uploaded as assets to a Github pre-release.
deploy:
  provider: releases
  skip_cleanup: true # Leave build artifacts in place (don't git clean)
  file_glob: true
  file:
    - "releases/*.*"
  token:
    secure: NFvrOvBDkBwvJWANXEbkRtrFE0msZF+269Q4VHWL44izsIF/uTooIPt5FlMBvsroiDunwA6Zs/kX8Nnrf/D1zePybNu9zf8JarJuCzZuu80pWSn2aJQHCqH6mKkprSa6BoqxnptJG7Qdr0e16FaSOiDNE68DRhFYztlLZynf4EdD6k40UkP0k+6+v1Wg6qkNNykexP6SZDOzDBTyOLH3KVYvQdTaaiNL6+B1/HYWVF+D+QwGQVp2/k7FDUkaPJMY+1FLmjGuu/5Snl6I9+HqOEkS0zyrob/9DDZx158KhrfnTfx4IKmACA9lGo1eVFb1ZngupA7VYp329kHd7FVYWFbY1lcc2FdBP74xhilzJ4S1wtvDL6FTRbwTai0B7/c0Tsad31e2/2zucldv7Xh2UAzeCv4SPyihFA7cMpzqXncRH9N/JTTArspn9fFXbGsvU1Xo+0GppMHO0PQf77vjUoT7v6wPyE5OYcd9n1/xrTNTX9mttBF864qYEi8gGdZXaIN5ziaVvmaeYXOFuFww+hmRFGuBlNGueTdsHndAKW8oxPKjcQziiTpjuoWokXjp7zg2UUp9F5azihHo1whPmjNNnzfC8Vu2OHgXb3Nj2ugm1NXMRhTKyRt6Lsa8rKL8ZW8J3WpD65Jcm0Wq42q9JfOOgVn/+vf0olKu5wGT0rc=
  overwrite: true
  name: "$RELEASE_NAME"
  # Travis does not support multi-line change logs / formatting.
  # body: "$(scripts/changelog.sh)"
  body: "Build #${TRAVIS_BUILD_NUMBER} (${LAST_COMMIT_DATE})"
  prerelease: true