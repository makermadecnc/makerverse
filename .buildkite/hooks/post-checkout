#!/bin/bash

# export NODE_OPTIONS="--max-old-space-size=4096"

# echo "Setting exports..."
# export NVM_DIR="$HOME/.nvm"

# if [[ -f "$NVM_DIR/nvm.sh" ]]; then
#   source "$NVM_DIR/nvm.sh"
# fi

# if [ ! $(which gpg) ]; then
#   apt-get -y update
#   apt-get -y install wget gpg
# fi

# # NodeJS version via NVM
# NODE_VERS=$(node --version)
# if [[ $NODE_VERS != v15* ]]; then
#   echo "Upgrading Node from ${NODE_VERS}..."
#   apt-get update -y && apt-get install -y curl
#   curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
#   source "$NVM_DIR/nvm.sh"

#   NV="15"
#   nvm install "${NV}"
#   nvm use "${NV}"
#   nvm alias default "${NV}"
# fi

# # Yarn
# if [ ! $(which yarn) ]; then
#   echo "Installing Yarn..."
#   apt-get install -y libatomic1
#   npm install -g yarn
# fi

# https://github.com/drud/ddev/issues/2772

if [ $BUILDKITE_AGENT_META_DATA_ARCH == "arm64v8" ]; then
  export DOTNET_ARCH="arm64v8"
  export DOTNET_RID="linux-arm64"
  export BUILDAH_ARCH="Raspbian"
elif [ $BUILDKITE_AGENT_META_DATA_ARCH == "arm32v7" ]; then
  export DOTNET_ARCH="arm32v7"
  export DOTNET_RID="linux-arm"
  export BUILDAH_ARCH="Raspbian"
else
  export DOTNET_ARCH="amd64"
#  export DOTNET_RID="linux-x64"
  export BUILDAH_ARCH="xUbuntu"
fi

# install buildah
if [ ! $(which buildah) ]; then
  apt-get update -y
  apt-get install -y curl gpg

  . /etc/os-release
  sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${BUILDAH_ARCH}_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
  curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/${BUILDAH_ARCH}_${VERSION_ID}/Release.key | apt-key add

  apt-get update
  apt-get -y install buildah
fi

# Infer the real branch from CI env
if [ $BUILDKITE_PULL_REQUEST != "false" ]; then
  # Pull requests always build as the "beta" branch.
  export DOCKER_BUILD_TAG="beta"
elif [ $BUILDKITE_BRANCH != "master" ]; then
  # Non-master branch builds are always "alpha".
  export DOCKER_BUILD_TAG="alpha"
else
  # Full production build, tagged latest.
  export DOCKER_BUILD_TAG="latest"
fi

export DOCKER_USER="inzania"
export PRODUCT_NAME="makerverse"
export DOCKER_REPO="makerverse/core"
